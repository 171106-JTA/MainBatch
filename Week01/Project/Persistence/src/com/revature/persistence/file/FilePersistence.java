package com.revature.persistence.file;

import java.util.LinkedList;
import java.util.List;

import org.apache.log4j.Logger;

import com.revature.businessobject.BusinessObject;
import com.revature.businessobject.info.Account;
import com.revature.businessobject.info.UserInfo;
import com.revature.businessobject.user.User;
import com.revature.core.FieldParams;
import com.revature.core.Resultset;
import com.revature.core.factory.BusinessObjectFactory;
import com.revature.persistence.Persistenceable;

/**
 * 
 * @author Antony Lulciuc
 */
public class FilePersistence implements Persistenceable {
	// File Names
	public static final String USERFILE = "user.ser";
	public static final String USERINFOFILE = "user_info.ser";
	public static final String ACCOUNTFILE = "account.ser";
	
	// Self
	private static FilePersistence manager;
	
	// Logger
	private static Logger logger = Logger.getLogger(FilePersistence.class);
	
	// Where to save files generated by class
	private static String directory = System.getProperty("user.dir");  
	
	// Used to generate objects from FieldParam
	private static BusinessObjectFactory factory = BusinessObjectFactory.getFactory();
	
	// Used to read and write BusinessObjects from/to file
	private static BusinessObjectFileIO io = new BusinessObjectFileIO();
	
	// Datasets used to cache system records
	private static List<User> users = new LinkedList<>();
	private static List<UserInfo> userInfo = new LinkedList<>();
	private static List<Account> accounts = new LinkedList<>();
	
	
	
	/**
	 * Initializes system data if any found 
	 */
	private FilePersistence() {
		loadData();
	}
	
	/**
	 * @return Creates single instance of FilePersistence 
	 */
	public static FilePersistence getManager() {
		return manager == null ? manager = new FilePersistence() : manager;
	}
	
	@Override
	public Resultset select(String name, FieldParams cnds) {
		// Log request
		logger.debug("select:>" + name + " with " + cnds.toString());
		
		switch (name.toLowerCase()) {
			case "user":
				return findUser(cnds);
			case "account":
				return findAccount(cnds);
			case "userinfo":
				return findUserInfo(cnds);
			default:
				// invalid type
				logger.warn(name + " is unknown type");
				return null;
		}
	}

	@Override
	public int update(BusinessObject businessObject) {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public int update(String name, FieldParams cnds, FieldParams values) {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public int insert(BusinessObject businessObject) {
		String clazz = businessObject.getClass().getName();
		
		switch (clazz.toLowerCase()) {
			case "user":
				return addUser((User)businessObject);
			case "userinfo":
				return addUserInfo((UserInfo)businessObject);
			case "account":
				return addAccount((Account)businessObject);
			default:
				return 0;
		}
	}

	@Override
	public int insert(String name, FieldParams values) {
		switch (name.toLowerCase()) {
			case "user":
				return addUser((User)factory.getBusinessObject(name, values));
			case "userinfo":
				return addUserInfo((UserInfo)factory.getBusinessObject(name, values));
			case "account":
				return addAccount((Account)factory.getBusinessObject(name, values));
			default:
				return 0;
		}
	}

	@Override
	public int delete(BusinessObject businessObject) {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public int delete(String name, FieldParams cnds) {
		// TODO Auto-generated method stub
		return 0;
	}

	/**
	 * @return path where system files are stored
	 */
	public static String getDirectory() {
		return directory;
	}
	
	/**
	 * Designates where data is stored in system
	 * @param directory - path to folder to store application data
	 */
	public static void setDirectory(String directory) {
		FilePersistence.directory = directory;
		
		// Update Manager data
		loadData();
	}
	
	public static void loadData() {
		BusinessObject object;
		
		// clear data
		clean();
		
		// Load user data
		io.openReadStream(directory + USERFILE);
		
		// Is user.ser file found
		if (io.isReadStreamOpen()) {
			while ((object = io.read()) != null) 
				users.add((User)object);
		}
		
		
	}
	
	public static void deleteData() {
		// clear data
		clean();
		
		logger.debug("deleting *.ser files");
		
		// delete user file 
		io.deleteFile(directory + USERFILE);
		
		// delete info file
		io.deleteFile(directory + USERINFOFILE);
		
		// delete account file
		io.deleteFile(directory + ACCOUNTFILE);
	}
	
	///
	//	PRIVATE METHODS 
	///
	
	private Resultset findUser(FieldParams cnds) {
		return null;
	}
	
	private Resultset findUserInfo(FieldParams cnds) {
		return null;
	}
	
	private Resultset findAccount(FieldParams cnds) {
		return null;
	}
	
	private static int addUser(User user) {
		// If failed to generate user
		if (user == null)
			return -1;
		
		users.add(user);
		saveData(directory + USERFILE, (BusinessObject[])users.toArray());
		return 1;
	}
	
	private static int addUserInfo(UserInfo info) {
		// If failed to generate user
		if (info == null)
			return -1;
		
		userInfo.add(info);
		saveData(directory + USERINFOFILE, (BusinessObject[])userInfo.toArray());
		return 1;
	}
	
	private static int addAccount(Account acct) {
		// If failed to generate user
		if (acct == null)
			return -1;
		
		accounts.add(acct);
		saveData(directory + ACCOUNTFILE, (BusinessObject[])accounts.toArray());
		return 1;
	}

	
	/**
	 * Clear collections 
	 */
	private static void clean() {
		users.clear();
	}

	/**
	 * Saves data to files
	 * @param path where to store data
	 * @param data what to write to file
	 */
	private static void saveData(String path, BusinessObject[] data) {
		BusinessObjectFileIO writer = new BusinessObjectFileIO();
		
		// Load user data
		writer.openWriteStream(path);
		
		// Save if file opened 
		if (writer.isWriteStreamOpen()) {
			for (BusinessObject item : data) {
				writer.write(item);
			}
		}
	}
	
	
}
