JTA Week 1 Topics covered

=========================================================
JAVA
=========================================================
- OOP Programming Language
- Fast, reliable, secure, portable

=========================================================
JRE, JDK, JVM
=========================================================
JVM - Java Virtual Machine
- Works on top of an OS to provide an environment for compiled java code
- Only reads Java byte code
JRE - Java Runtime Environment
- The minimal environment required to run Java
- Includes the JVM and all compiled files required to run JAVA 
JDK - Java Development Kit
- All libraries required to develope Java code
- Includes the Java compiler, JavaDoc, Jar, and the debugger

=========================================================
Command line java
=========================================================
?????

=========================================================
Heap vs stack
=========================================================
Heap: Stores Objects, Instance Variables, and contains the String Pool
Stack: Stores local variables and function calls. One Stack per thread

=========================================================
String Pool
=========================================================
Stores string literals 
Saves memory by offering references to the same string to be used by multiple resources

=========================================================
control statements
=========================================================
If else 
For
While
Do-While

=========================================================
primitive datatypes
=========================================================
boolean - technically 8 bits, theoretically 1 bits - default = false
byte - 8 bits - default = 0
char - 16 bits - default = \u0000
short - 16 bits - default = 0
int - 32 bits - default = 0
float - 32 bits - default = 0.0f
long - 64 bits - default = 0
double - 64 bits - default = 0.0
object - null

=========================================================
Implicit and explicit typecasting
=========================================================
Typcasting: Assigning a value of one type to a variable of 
another type. In Java we can typecast both primative and 
Object data types 
Implicit typecasting: Typecasting that does not require extra 
notation. In general, we can implicitly typecast when we downcast 
(example: Setting a class parent reference equal to a child object)
Explicit typecasting: Typecasting that requires explicit 
notation. Usually needed for upcasting

=========================================================
wrapper classes, autoboxing
=========================================================
Wrapper Classes: The objects that encapsulate primative 
data types in Java
Autoboxing: The automatic conversion between primative datatypes
and their wrapper classes. 

=========================================================
Design patterns: Pojo, Singleton, Factory
=========================================================

=========================================================
String api, Reflections api
=========================================================

=========================================================
StringBuffer vs StringBuilder
=========================================================

=========================================================
Variable Shadowing, overloading, overriding
=========================================================

=========================================================
Pillars of OOP: Inheritance, Abstraction, Polymorphism, Encapsulation
=========================================================
Abstraction 
- Hides implementation of code
- Writing code once (abstracting duplicate code to separate module)
- Example: 
Encapsulation
- Data/information hiding
- Access 'hidden' data through access modifiers
- Hides internal module data
- Example: 
Inheritance
- The ability to inherit functionality and properties from a superclass
- And to alter the functionality of child classes.
Polymorphism 
- Allow components to change functionality. 
- Achieved through method overloading, method overwritting, and covariance

=========================================================
Is-A/Has-A relationships
=========================================================
Is-A -> inheritance/covariance. i.e. the child class 'is-a' parent class
Has-A -> Objects inside of objects. i.e. a class 'has-a' instance of another class. 

=========================================================
Covariance
=========================================================
Child classes can be set to parent classes
(Related to inheritance)

=========================================================
Exceptions, checked exceptions, unchecked exceptions, ducking/propagating, Exception vs Errors, Exception Inheritance Tree
=========================================================
Exception: An event when a program does not perform as expected. 
In other words, when an application behanves in a manner it shouldn't
Exception VS Error: An error is its own class and is any situation
where the programm cannot reasonably recover. Error examples: OutOfMemoryError (heap) StackOverflowError (stack)
Checked Exception: An exception that must have a try/catch statement
at compile time. An exception that must be handled at compile time. Examples: FileNotFoundException and Exception
Unchecked Exception: Need not have a try/catch statement at compile time. An exception that does not need to be handled at compile time. 
Example: RuntimeException
Ducking/Propogating/Abstring exceptions: 'Throws keyword'

=========================================================
serialization, transient
=========================================================
Serialization:
What is serialization? The conversion of an object to s series of bytes, so that it can be easily saved.
How to serialize? Overload the toString() method to return a string

=========================================================
Short circuit operators
=========================================================
Operators that stop evaluating once the result is definite. 
(when True shows us in an OR statement or when False shows up in 
an AND statement)

=========================================================
Access Modifiers
=========================================================
The methods that allow for fetching and changing member variables
Also known at Getters and Setters

=========================================================
Constructors
=========================================================
Functions called when an instance of a class is instantiated
They usually involve initializing member variables

=========================================================
Scopes
=========================================================
Static
Instance
Method
Local

=========================================================
Static, final
=========================================================
Static - static members of a class are shared among all instances of that class
Final - Final (in general): cannot be changed. Values in final varialbes cannot be changed and final variables cannot be reassigned. Final methods cannot be overloaded ????????????????????

=========================================================
Diamond Problem
=========================================================
Arises from multiple inheritance. Arises when a two classes (call them B and C) derive from a common parent (call it A), and then a fourth class (Class D) derives from both B and C. There is ambiguity related to which version of a method D should use: the version from B or C

interfaces vs abstract classes

Garbage Collector

varargs

Multithreeading, threads in general, thread states

producer consumer problem, synchronization, deadlock/livvelock

How create a thread

File IO

Java Docs

Junit, unit testing, junit annotations

logging, log4j

Collections, know heirachy, iterators, 

comparable v comparator

Generics

Maven Lifecycle, Maven, POM.xml

git

