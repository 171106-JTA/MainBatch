package com.revature.model.account;

import java.util.*;

import com.revature.exception.AccountOverdraftException;
import com.revature.model.*;

public abstract class UserAccount extends Account {
	/**
	 * 
	 */
	private static final long serialVersionUID = -4924824758721672232L;
	protected int limit, penalty, status;
	protected double interest;
	private double balance;
	private Date date;
	private Map<Integer, Transaction> transactions;
	
	public UserAccount(String user, String pass, int limit, int penalty, double interest) {
		super();
		date = new Date();
		status = Constants.ACCT_STAT_PENDING;
	}

	protected void setPermissions() {
		super.permissions = Constants.READ;
	}

	public int getLimit() {
		return limit;
	}

	public double getInterest() {
		return interest;
	}

	public double getBalance() {
		return balance;
	}
	
	public void setBalance(double balance) {
		this.balance = balance;
	}
	
	public int getPenalty() {
		return penalty;
	}

	public Date getDate() {
		return date;
	}

	public synchronized boolean processTransaction(double amount, String message, boolean override) throws AccountOverdraftException {
		Transaction t;
		if (balance - amount < 0)
			if (!override) {
				throw new AccountOverdraftException();
			}
		t = new Transaction(amount, message);
		synchronized (transactions) {
			transactions.put(t.getUid(), t);
		}

		return true;
	}

	public synchronized void cancelTransaction(int id) {
		Model m = Model.getInstance();
		m.queryRequests(Constants.PROT_ADD, id);
	}

	public int getStatus() {
		return status;
	}
	
	public void setStatus(int status) {
		this.status = status;
	}
}
