package com.revature.model.account;

import java.util.*;

import com.revature.exception.AccountOverdraftException;
import com.revature.model.*;
import com.revature.model.request.CancelRequest;

public class UserAccount extends Account {
	protected int limit;
	protected double interest;
	private double balance;
	private Date date;
	protected Map<Integer, Transaction> transactions;
	

	public UserAccount(String user, String pass) {
		super(user, pass);
		date = new Date();
	}

	protected void setPermissions() {
		super.permissions = Constants.READ;
	}

	public int getLimit() {
		return limit;
	}

	public void setLimit(int limit) {
		this.limit = limit;
	}

	public double getInterest() {
		return interest;
	}

	public double getBalance() {
		return balance;
	}

	public Date getDate() {
		return date;
	}

	public synchronized boolean processTransaction(double amount, String message, boolean override) throws AccountOverdraftException {
		Transaction t;
		if (balance - amount < 0)
			if (!override) {
				throw new AccountOverdraftException();
			}
		t = new Transaction(amount, message);
		synchronized (transactions) {
			transactions.put(t.getUid(), t);
		}

		return true;
	}

	public synchronized void cancelTransaction(int id) {
		Model m = Model.getInstance();
		m.queryRequests(Constants.PROT_ADD, id);
	}

	@Override
	public char getPermissions() {
		// TODO Auto-generated method stub
		return 0;
	}
}
