<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" version="2.5">
  <display-name>171106_RestWithJersey</display-name>

	<servlet>
		<servlet-name>Jersey Web Application</servlet-name>
		<servlet-class>org.glassfish.jersey.servlet.ServletContainer</servlet-class>
		<init-param>
			<param-name>jersey.config.server.provider.packages</param-name>
			<param-value>com.revature.rest</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>
	<servlet-mapping>
		<servlet-name>Jersey Web Application</servlet-name>
		<url-pattern>/rest/*</url-pattern>
	</servlet-mapping>
	<!-- CORS -> Cross Origin Resource Sharing 
		Browsers hate it when you grab resources outside of the current
		environment that you are connected to. It poses a risk of websites
		grabbing data from unknown sources and using them on their own site.
		This leaves for possibilities malicious resources. 
		However, if we want to use resources, or supply resources from other
		urls/uris we need to make an exception in the browser to allow it.
		Below is a filter servlet that sets header details to allow resource
		sharing for other locations. In this case, a generic angular 4 application.
		We allow from an angular application on localhost form port 4200.
	-->
	<filter>
		<filter-name>corsFilter</filter-name>
		<filter-class>org.apache.catalina.filters.CorsFilter</filter-class>
		<init-param>
			<param-name>cors.allowed.origins</param-name>
			<param-value>http://localhost:4200</param-value>
		</init-param>

		<init-param>
			<param-name>cors.allowed.methods</param-name>
			<param-value>GET, POST, PUT, DELETE, OPTIONS, HEAD</param-value>
		</init-param>

	</filter>
	<filter-mapping>
		<filter-name>corsFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	
</web-app>