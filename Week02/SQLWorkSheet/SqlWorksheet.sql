-- Task 2.1
SELECT *  FROM EMPLOYEE;

SELECT * FROM EMPLOYEE WHERE LASTNAME = 'King';

SELECT * FROM Employee WHERE FIRSTNAME = 'Andrew' AND REPORTSTO IS NULL;

-- Task 2.2
SELECT * FROM Album ORDER BY TITLE DESC;

SELECT FIRSTNAME FROM CUSTOMER ORDER BY CITY ASC;

-- Task 2.3
INSERT INTO GENRE VALUES (26, 'Technical Death Metal');
INSERT INTO GENRE VALUES (27, 'Bobbert Metal');

INSERT INTO EMPLOYEE VALUES (9, 'A', 'J', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
INSERT INTO EMPLOYEE VALUES (10, 'B', 'K', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);

INSERT INTO CUSTOMER VALUES (60, 'C', 'L', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'email@emila.com', NULL);
INSERT INTO CUSTOMER VALUES (61, 'D', 'M', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'email@emila.com', NULL);

-- Task 2.4
UPDATE CUSTOMER SET FIRSTNAME = 'Robert', LASTNAME = 'Walter' WHERE FIRSTNAME = 'Aaron' AND LASTNAME = 'Mitchell';

UPDATE ARTIST SET NAME = 'CCR' WHERE NAME = 'Creedence Clearwater Revival';

-- TASK 2.5
SELECT * FROM INVOICE WHERE BILLINGADDRESS LIKE 'T%';

-- Task 2.6
SELECT * FROM INVOICE WHERE TOTAL BETWEEN 15 AND 30;

SELECT * FROM EMPLOYEE WHERE HIREDATE BETWEEN TO_DATE('2003-6-1', 'YYYY-MM-DD') AND TO_DATE('2004-3-1', 'YYYY-MM-DD');

-- Task 2.7

DELETE FROM INVOICELINE WHERE INVOICEID IN 
    (SELECT INVOICEID FROM CUSTOMER NATURAL JOIN INVOICE NATURAL JOIN INVOICELINE 
     WHERE FIRSTNAME = 'Robert' AND LASTNAME = 'Walter' );
     
DELETE FROM INVOICE WHERE CUSTOMERID IN
    (SELECT CUSTOMERID FROM CUSTOMER NATURAL JOIN INVOICE WHERE FIRSTNAME = 'Robert' AND LASTNAME = 'Walter' );
     
DELETE FROM CUSTOMER WHERE FIRSTNAME = 'Robert' AND LASTNAME = 'Walter';

-- Task 3.1
CREATE OR REPLACE FUNCTION GET_TIME
RETURN TIMESTAMP IS
    cur_time TIMESTAMP;
BEGIN
    SELECT SYSDATE INTO cur_time FROM DUAL;
    RETURN cur_time;
END;
/

DECLARE
    cur_time TIMESTAMP;
BEGIN
    cur_time := GET_TIME();
    DBMS_OUTPUT.PUT_LINE(cur_time);
END;
/

CREATE OR REPLACE FUNCTION media_len
(media_id IN NUMBER)
RETURN NUMBER IS
    len NUMBER;
BEGIN
    SELECT LENGTH(NAME) INTO len FROM MEDIATYPE WHERE MEDIATYPEID = media_id;
    RETURN len;
END;
/

DECLARE
    len NUMBER;
    mt_id NUMBER;
BEGIN
    mt_id := 2;
    len := MEDIA_LEN(mt_id);
    DBMS_OUTPUT.PUT_LINE(len);
END;
/

-- Task 3.2
SELECT AVG(TOTAL) FROM INVOICE;

SELECT NAME, UNITPRICE FROM TRACK WHERE UNITPRICE = (SELECT MAX(UNITPRICE) FROM TRACK);

-- Task 3.3
CREATE OR REPLACE FUNCTION average_invoiceline_items
RETURN NUMBER IS
    average NUMBER;
BEGIN
    SELECT AVG(UNITPRICE) INTO average FROM INVOICELINE;
    RETURN average;
END;
/

DECLARE
    average NUMBER;
BEGIN
    average := average_invoiceline_items();
    DBMS_OUTPUT.PUT_LINE(average);
END;
/

CREATE OR REPLACE FUNCTION get_employees
RETURN SYS_REFCURSOR
AS emp_cursor SYS_REFCURSOR;
BEGIN
    OPEN emp_cursor FOR SELECT * FROM EMPLOYEE WHERE BIRTHDATE > TO_DATE(1968, 'yyyy');
    RETURN emp_cursor;
END;
/

-- Task 4.1
CREATE OR REPLACE PROCEDURE get_names
(OUT SYS_REFCURSOR)
AS name_cursor SYS_REFCURSOR;
BEGIN
    OPEN name_cursor FOR SELECT firstname, lastname FROM EMPLOYEE;
END;

-- Task 4.2
CREATE OR REPLACE PROCEDURE update_emp
(addr IN VARCHAR2, new_city IN VARCHAR2, new_country IN VARCHAR2,
postal IN VARCHAR2, new_phone IN VARCHAR2, new_fax IN VARCHAR2, 
new_email IN VARCHAR2, emp_id IN NUMBER, OUT SYS_REFCURSOR)
AS emp_update SYS_REFCURSOR;
BEGIN
    UPDATE EMPLOYEE SET 
        ADDRESS = addr,
        CITY = new_city,
        COUNTRY = new_country,
        POSTALCODE = postal,
        PHONE = new_phone,
        FAX = new_fax,
        EMAIL = new_email
    WHERE EMPLOYEEID = emp_id;
END;
/

CREATE OR REPLACE PROCEDURE get_manager(emp_id IN NUMBER, manager_id OUT NUMBER)
AS
BEGIN
    SELECT REPORTSTO INTO manager_id FROM EMPLOYEE WHERE EMPLOYEEID = emp_id;
END;
/

-- Task 4.3
CREATE OR REPLACE PROCEDURE get_company
(cust_id IN NUMBER, comp_name OUT VARCHAR2, cust_name OUT VARCHAR2)
AS BEGIN
    DECLARE
        first_n VARCHAR2(40 BYTE);
        last_n VARCHAR2(20 BYTE);
    BEGIN
        SELECT FIRSTNAME, LASTNAME, COMPANY INTO first_n, last_n, comp_name FROM
            CUSTOMER WHERE CUSTOMERID = cust_id;
        cust_name := CONCAT(CONCAT(first_n, ' '), last_n);
    END;
END;
/

-- Task 5
CREATE OR REPLACE PROCEDURE delete_invoice
(invoice_id IN NUMBER, OUT SYS_REFCURSOR)
AS
BEGIN
    DELETE FROM INVOICELINE WHERE INVOICEID IN
        (SELECT INVOICEID FROM INVOICE NATURAL JOIN INVOICELINE WHERE INVOICEID = invoice_id);
    DELETE FROM INVOICE WHERE INVOICEID = invoice_id;
    COMMIT;
    
    EXCEPTION WHEN OTHERS THEN ROLLBACK;
END;
/

CREATE OR REPLACE PROCEDURE add_cust
(cust_id IN NUMBER, f_name IN VARCHAR2, l_name IN VARCHAR2, comp IN VARCHAR2,
addr IN VARCHAR2, city_name IN VARCHAR2, state_name IN VARCHAR2,country_name IN VARCHAR2,
postal IN VARCHAR2, phone_num IN VARCHAR2, fax_num IN VARCHAR2, email_addr IN VARCHAR2, 
rep IN NUMBER, OUT SYS_REFCURSOR)
AS BEGIN
    INSERT INTO CUSTOMER VALUES(cust_id, f_name, l_name, comp, addr, city_name, state_name, country_name, postal,
                                phone_num, fax_num, email_addr, rep);
    COMMIT;
END;
/

-- Task 6.1
CREATE OR REPLACE TRIGGER after_emp_trigger
AFTER INSERT ON CUSTOMER
BEGIN
    DBMS_OUTPUT.PUT_LINE('Trigger After Employee Inster fired');
END;
/

CREATE OR REPLACE TRIGGER after_album_trigger
AFTER UPDATE ON ALBUM
BEGIN
    DBMS_OUTPUT.PUT_LINE('Trigger After Album Update fired');
END;
/

CREATE OR REPLACE TRIGGER after_cust_trigger
AFTER DELETE ON CUSTOMER
BEGIN
    DBMS_OUTPUT.PUT_LINE('Trigger After Customer Deleter fired');
END;
/

-- Task 7.1
SELECT CONCAT(CONCAT(FIRSTNAME, '  '), LASTNAME) AS NAME, INVOICE.INVOICEID FROM CUSTOMER
    JOIN INVOICE ON INVOICE.CUSTOMERID = CUSTOMER.CUSTOMERID;
    
-- Task 7.2
SELECT CUSTOMER.CUSTOMERID, FIRSTNAME, LASTNAME, INVOICEID, TOTAL FROM CUSTOMER
    JOIN INVOICE ON INVOICE.CUSTOMERID = CUSTOMER.CUSTOMERID;
    
-- Task 7.3
SELECT NAME, TITLE FROM ALBUM RIGHT JOIN ARTIST ON ARTIST.ARTISTID = ALBUM.ARTISTID;

-- Task 7.4
SELECT * FROM ALBUM CROSS JOIN ARTIST ORDER BY NAME ASC;

-- Task 7.5
SELECT * FROM EMPLOYEE a, EMPLOYEE b WHERE a.REPORTSTO = b.REPORTSTO;