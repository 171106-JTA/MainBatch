{"version":3,"file":"UnsubscriptionError.js","sourceRoot":"","sources":["../../src/util/UnsubscriptionError.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA;;;GAGG;AACH;IAAyC,uCAAK;IAC5C,6BAAmB,MAAa;QAAhC,YACE,iBAAO,SAOR;QARkB,YAAM,GAAN,MAAM,CAAO;QAE9B,IAAM,GAAG,GAAQ,KAAK,CAAC,IAAI,CAAC,KAAI,EAAE,MAAM,CAAC,CAAC;YACrC,MAAM,CAAC,MAAM,mDAClB,MAAM,CAAC,GAAG,CAAC,UAAC,GAAG,EAAE,CAAC,IAAK,OAAG,CAAC,GAAG,CAAC,UAAK,GAAG,CAAC,QAAQ,EAAI,EAA7B,CAA6B,CAAC,CAAC,IAAI,CAAC,MAAM,CAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;QACpE,KAAK,CAAC,IAAI,GAAG,GAAG,CAAC,IAAI,GAAG,qBAAqB,CAAC;QAC9C,KAAK,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC;QACxB,KAAK,CAAC,OAAO,GAAG,GAAG,CAAC,OAAO,CAAC;;IACrC,CAAC;IACH,0BAAC;AAAD,CAAC,AAVD,CAAyC,KAAK,GAU7C;AAVY,kDAAmB","sourcesContent":["/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nexport class UnsubscriptionError extends Error {\n  constructor(public errors: any[]) {\n    super();\n    const err: any = Error.call(this, errors ?\n      `${errors.length} errors occurred during unsubscription:\n  ${errors.map((err, i) => `${i + 1}) ${err.toString()}`).join('\\n  ')}` : '');\n    (<any> this).name = err.name = 'UnsubscriptionError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n"]}