/*A SCRIPT TO CREATE THE DATABASE FOR THE TRMS ACCORDING
 *TO THE SPECIFICATION IN /documentation/trms-database.png*/
/*FOR ORACLE DATABASES*/

--DROP USER trms CASCADE;
--
--CREATE USER trms
--IDENTIFIED BY p4ssw0rd
--DEFAULT TABLESPACE users
--TEMPORARY TABLESPACE temp
--QUOTA 10M ON users;
--
--GRANT connect to trms;
--GRANT resource to trms;
--GRANT create session TO trms;
--GRANT create table TO trms;
--GRANT create view TO trms;
--
--conn trms/p4ssw0rd

/******************************************************************************/
/******************************************************************************/
/*DEPARTMENT*******************************************************************/
DROP TABLE DEPARTMENT CASCADE CONSTRAINTS PURGE;

CREATE TABLE DEPARTMENT(
    DEPARTMENT_ID   NUMBER NOT NULL,
    DEPARTMENT_NAME VARCHAR2(40) NOT NULL,
    CONSTRAINT PK_DEPARTMENT PRIMARY KEY (DEPARTMENT_ID)
);

ALTER TABLE DEPARTMENT ADD CONSTRAINT UNIQUE_DEPARTMENT
    UNIQUE (DEPARTMENT_NAME);

INSERT INTO DEPARTMENT ( DEPARTMENT_ID, DEPARTMENT_NAME)
VALUES ( 0, 'MECHANICAL');
INSERT INTO DEPARTMENT ( DEPARTMENT_ID, DEPARTMENT_NAME)
VALUES ( 1, 'ELECTRICAL');
INSERT INTO DEPARTMENT ( DEPARTMENT_ID, DEPARTMENT_NAME)
VALUES ( 2, 'CIVIL');
INSERT INTO DEPARTMENT ( DEPARTMENT_ID, DEPARTMENT_NAME)
VALUES ( 3, 'HUMAN RESOURCES');


/******************************************************************************/
/******************************************************************************/
/*EMPLOYEE_TITLE***************************************************************/
DROP TABLE EMPLOYEE_TITLE CASCADE CONSTRAINTS PURGE;

CREATE TABLE EMPLOYEE_TITLE(
    EMPLOYEE_TITLE_ID   NUMBER NOT NULL,
    EMPLOYEE_TITLE_NAME VARCHAR2(60),
    CONSTRAINT PK_EMPLOYEE_TITLE PRIMARY KEY (EMPLOYEE_TITLE_ID)
);

ALTER TABLE EMPLOYEE_TITLE ADD CONSTRAINT UNIQUE_TITLE
    UNIQUE (EMPLOYEE_TITLE_NAME);
    
INSERT INTO EMPLOYEE_TITLE ( EMPLOYEE_TITLE_ID, EMPLOYEE_TITLE_NAME)
VALUES ( 0, 'DEPARTMENT HEAD');
INSERT INTO EMPLOYEE_TITLE ( EMPLOYEE_TITLE_ID, EMPLOYEE_TITLE_NAME)
VALUES ( 1, 'MANAGER');
INSERT INTO EMPLOYEE_TITLE ( EMPLOYEE_TITLE_ID, EMPLOYEE_TITLE_NAME)
VALUES ( 2, 'NONE');
INSERT INTO EMPLOYEE_TITLE ( EMPLOYEE_TITLE_ID, EMPLOYEE_TITLE_NAME)
VALUES ( 3, 'BENEFIT COORDINATOR');


/******************************************************************************/
/******************************************************************************/
/*ADDRESS**********************************************************************/
DROP TABLE ADDRESS CASCADE CONSTRAINTS PURGE;

CREATE TABLE ADDRESS(
    ADDRESS_ID              NUMBER NOT NULL,
    ADDRESS_STREET_ADDRESS  VARCHAR2(60) NOT NULL,
    ADDRESS_CITY            VARCHAR2(30) NOT NULL,
    ADDRESS_STATE           VARCHAR2(2) NOT NULL,
    ADDRESS_ZIP             VARCHAR2(10) NOT NULL,
    CONSTRAINT PK_ADDRESS PRIMARY KEY (ADDRESS_ID)
);
ALTER TABLE ADDRESS ADD CONSTRAINT UNIQUE_ADDRESS
    UNIQUE(ADDRESS_STREET_ADDRESS, ADDRESS_CITY, ADDRESS_STATE, ADDRESS_ZIP);

DROP SEQUENCE ADDR_ID_SEQ;

CREATE SEQUENCE ADDR_ID_SEQ MINVALUE 1 MAXVALUE 999999999999999
    INCREMENT BY 1 START WITH 30000 NOCACHE NOORDER NOCYCLE;

CREATE OR REPLACE TRIGGER ADDRESS_INSERT
    BEFORE INSERT ON ADDRESS
    FOR EACH ROW
    BEGIN
        SELECT ADDR_ID_SEQ.NEXTVAL INTO :NEW.ADDRESS_ID FROM DUAL;
    END;
/

INSERT INTO ADDRESS ( ADDRESS_STREET_ADDRESS, ADDRESS_CITY, ADDRESS_STATE, ADDRESS_ZIP)
VALUES ( '123 Sum Place', 'Addison', 'LA', '12345');
INSERT INTO ADDRESS ( ADDRESS_STREET_ADDRESS, ADDRESS_CITY, ADDRESS_STATE, ADDRESS_ZIP)
VALUES ( '456 Sum Place', 'Addison', 'LA', '12345');
INSERT INTO ADDRESS ( ADDRESS_STREET_ADDRESS, ADDRESS_CITY, ADDRESS_STATE, ADDRESS_ZIP)
VALUES ( '789 Sum Place', 'Addison', 'LA', '12345');

INSERT INTO ADDRESS ( ADDRESS_STREET_ADDRESS, ADDRESS_CITY, ADDRESS_STATE, ADDRESS_ZIP)
VALUES ( '123 Difference Blvd', 'Mine Us Town', 'MS', '67891');
INSERT INTO ADDRESS ( ADDRESS_STREET_ADDRESS, ADDRESS_CITY, ADDRESS_STATE, ADDRESS_ZIP)
VALUES ( '456 Difference Blvd', 'Mine Us Town', 'MS', '67891');
INSERT INTO ADDRESS ( ADDRESS_STREET_ADDRESS, ADDRESS_CITY, ADDRESS_STATE, ADDRESS_ZIP)
VALUES ( '789 Difference Blvd', 'Mine Us Town', 'MS', '67891');

INSERT INTO ADDRESS ( ADDRESS_STREET_ADDRESS, ADDRESS_CITY, ADDRESS_STATE, ADDRESS_ZIP)
VALUES ( '123 Times Ave', 'Productsville', 'LA', '23456');
INSERT INTO ADDRESS ( ADDRESS_STREET_ADDRESS, ADDRESS_CITY, ADDRESS_STATE, ADDRESS_ZIP)
VALUES ( '456 Times Ave', 'Productsville', 'LA', '23456');
INSERT INTO ADDRESS ( ADDRESS_STREET_ADDRESS, ADDRESS_CITY, ADDRESS_STATE, ADDRESS_ZIP)
VALUES ( '789 Times Ave', 'Productsville', 'LA', '23456');

INSERT INTO ADDRESS ( ADDRESS_STREET_ADDRESS, ADDRESS_CITY, ADDRESS_STATE, ADDRESS_ZIP)
VALUES ( '123 Division St.', 'Quotient Point', 'LA', '34567');
INSERT INTO ADDRESS ( ADDRESS_STREET_ADDRESS, ADDRESS_CITY, ADDRESS_STATE, ADDRESS_ZIP)
VALUES ( '456 Division St.', 'Quotient Point', 'LA', '34567');
INSERT INTO ADDRESS ( ADDRESS_STREET_ADDRESS, ADDRESS_CITY, ADDRESS_STATE, ADDRESS_ZIP)
VALUES ( '789 Division St.', 'Quotient Point', 'LA', '34567');

INSERT INTO ADDRESS ( ADDRESS_STREET_ADDRESS, ADDRESS_CITY, ADDRESS_STATE, ADDRESS_ZIP)
VALUES ( '123 Fun Dip Blvd.', 'Quotient Point', 'LA', '34567');
INSERT INTO ADDRESS ( ADDRESS_STREET_ADDRESS, ADDRESS_CITY, ADDRESS_STATE, ADDRESS_ZIP)
VALUES ( '456 Fun Dip Blvd.', 'Quotient Point', 'LA', '34567');
INSERT INTO ADDRESS ( ADDRESS_STREET_ADDRESS, ADDRESS_CITY, ADDRESS_STATE, ADDRESS_ZIP)
VALUES ( '789 Fun Dip Blvd.', 'Quotient Point', 'LA', '34567');

INSERT INTO ADDRESS ( ADDRESS_STREET_ADDRESS, ADDRESS_CITY, ADDRESS_STATE, ADDRESS_ZIP)
VALUES ( '123 Whatchamacallit Crossing', 'Productsville', 'LA', '23456');
INSERT INTO ADDRESS ( ADDRESS_STREET_ADDRESS, ADDRESS_CITY, ADDRESS_STATE, ADDRESS_ZIP)
VALUES ( '456 Whatchamacallit Crossing', 'Productsville', 'LA', '23456');
INSERT INTO ADDRESS ( ADDRESS_STREET_ADDRESS, ADDRESS_CITY, ADDRESS_STATE, ADDRESS_ZIP)
VALUES ( '789 Whatchamacallit Crossing', 'Productsville', 'LA', '23456');


/******************************************************************************/
/******************************************************************************/
/*EMPLOYEE*********************************************************************/
DROP TABLE EMPLOYEE CASCADE CONSTRAINTS PURGE;

CREATE TABLE EMPLOYEE (
    EMPLOYEE_ID         NUMBER NOT NULL,
    EMPLOYEE_FIRSTNAME  VARCHAR2(30) NOT NULL,
    EMPLOYEE_LASTNAME   VARCHAR2(30) NOT NULL,
    EMPLOYEE_ADDRESS    NUMBER,
    EMPLOYEE_SUPER_ID   NUMBER,
    EMPLOYEE_DEPARTMENT NUMBER NOT NULL,
    EMPLOYEE_EMAIL      VARCHAR2(50),
    EMPLOYEE_PASSWORD   VARCHAR2(50),
    EMPLOYEE_TITLE      NUMBER,
    EMPLOYEE_FUNDS      NUMBER(10, 2) NOT NULL,
    CONSTRAINT PK_EMPLOYEE PRIMARY KEY (EMPLOYEE_ID)
);
ALTER TABLE EMPLOYEE ADD CONSTRAINT UNIQUE_EMAIL
    UNIQUE (EMPLOYEE_EMAIL);

DROP SEQUENCE EMPLOYEE_ID_SEQ;

CREATE SEQUENCE EMPLOYEE_ID_SEQ MINVALUE 1 MAXVALUE 999999999999
    INCREMENT BY 1 START WITH 10000 NOCACHE NOORDER NOCYCLE;

CREATE OR REPLACE TRIGGER EMPLOYEE_INSERT
    BEFORE INSERT ON EMPLOYEE
    FOR EACH ROW
    BEGIN
        SELECT EMPLOYEE_ID_SEQ.NEXTVAL INTO :NEW.EMPLOYEE_ID FROM DUAL;
    END;
/

INSERT INTO EMPLOYEE ( EMPLOYEE_FIRSTNAME, EMPLOYEE_LASTNAME, EMPLOYEE_ADDRESS, 
                       EMPLOYEE_SUPER_ID, EMPLOYEE_DEPARTMENT, EMPLOYEE_EMAIL,
                       EMPLOYEE_PASSWORD, EMPLOYEE_TITLE, EMPLOYEE_FUNDS)
VALUES ( 'Joe', 'Blow', 30000, NULL, 0, 'jblow@work.com', '1234', 0, 800.00);
INSERT INTO EMPLOYEE ( EMPLOYEE_FIRSTNAME, EMPLOYEE_LASTNAME, EMPLOYEE_ADDRESS, EMPLOYEE_SUPER_ID, EMPLOYEE_DEPARTMENT, EMPLOYEE_EMAIL, EMPLOYEE_PASSWORD, EMPLOYEE_TITLE, EMPLOYEE_FUNDS)
VALUES ( 'Lewis', 'Carter', 30001, NULL, 0, 'lcarter@work.com', '1234', 1, 500.00);
INSERT INTO EMPLOYEE ( EMPLOYEE_FIRSTNAME, EMPLOYEE_LASTNAME, EMPLOYEE_ADDRESS, EMPLOYEE_SUPER_ID, EMPLOYEE_DEPARTMENT, EMPLOYEE_EMAIL, EMPLOYEE_PASSWORD, EMPLOYEE_TITLE, EMPLOYEE_FUNDS)
VALUES ( 'Mark', 'Delta', 30002, NULL, 0, 'mdelta@work.com', '1234', 2, 200.00);
INSERT INTO EMPLOYEE ( EMPLOYEE_FIRSTNAME, EMPLOYEE_LASTNAME, EMPLOYEE_ADDRESS, EMPLOYEE_SUPER_ID, EMPLOYEE_DEPARTMENT, EMPLOYEE_EMAIL, EMPLOYEE_PASSWORD, EMPLOYEE_TITLE, EMPLOYEE_FUNDS)
VALUES ( 'Nathan', 'Edwards', 30003, NULL, 0, 'nedwards@work.com', '1234', 2, 300.00);
INSERT INTO EMPLOYEE ( EMPLOYEE_FIRSTNAME, EMPLOYEE_LASTNAME, EMPLOYEE_ADDRESS, EMPLOYEE_SUPER_ID, EMPLOYEE_DEPARTMENT, EMPLOYEE_EMAIL, EMPLOYEE_PASSWORD, EMPLOYEE_TITLE, EMPLOYEE_FUNDS)
VALUES ( 'Oscar', 'Fox', 30004, NULL, 0, 'ofox@work.com', '1234', 2, 600.00);

INSERT INTO EMPLOYEE ( EMPLOYEE_FIRSTNAME, EMPLOYEE_LASTNAME, EMPLOYEE_ADDRESS, 
                       EMPLOYEE_SUPER_ID, EMPLOYEE_DEPARTMENT, EMPLOYEE_EMAIL,
                       EMPLOYEE_PASSWORD, EMPLOYEE_TITLE, EMPLOYEE_FUNDS)
VALUES ( 'Floe', 'Bell', 30005, NULL, 1, 'fbell@work.com', '1234', 0, 1000.00);
INSERT INTO EMPLOYEE ( EMPLOYEE_FIRSTNAME, EMPLOYEE_LASTNAME, EMPLOYEE_ADDRESS, EMPLOYEE_SUPER_ID, EMPLOYEE_DEPARTMENT, EMPLOYEE_EMAIL, EMPLOYEE_PASSWORD, EMPLOYEE_TITLE, EMPLOYEE_FUNDS)
VALUES ( 'Georgia', 'Carter', 30006, NULL, 1, 'gcarter@work.com', '1234', 1, 1000.00);
INSERT INTO EMPLOYEE ( EMPLOYEE_FIRSTNAME, EMPLOYEE_LASTNAME, EMPLOYEE_ADDRESS, EMPLOYEE_SUPER_ID, EMPLOYEE_DEPARTMENT, EMPLOYEE_EMAIL, EMPLOYEE_PASSWORD, EMPLOYEE_TITLE, EMPLOYEE_FUNDS)
VALUES ( 'Henrietta', 'Lacks', 30007, NULL, 1, 'hlacks@work.com', '1234', 2, 300.00);
INSERT INTO EMPLOYEE ( EMPLOYEE_FIRSTNAME, EMPLOYEE_LASTNAME, EMPLOYEE_ADDRESS, EMPLOYEE_SUPER_ID, EMPLOYEE_DEPARTMENT, EMPLOYEE_EMAIL, EMPLOYEE_PASSWORD, EMPLOYEE_TITLE, EMPLOYEE_FUNDS)
VALUES ( 'Isabel', 'Nunez', 30008, NULL, 1, 'inunez@work.com', '1234', 2, 300.00);
INSERT INTO EMPLOYEE ( EMPLOYEE_FIRSTNAME, EMPLOYEE_LASTNAME, EMPLOYEE_ADDRESS, EMPLOYEE_SUPER_ID, EMPLOYEE_DEPARTMENT, EMPLOYEE_EMAIL, EMPLOYEE_PASSWORD, EMPLOYEE_TITLE, EMPLOYEE_FUNDS)
VALUES ( 'Joline', 'Emerald', 30009, NULL, 1, 'jemerald@work.com', '1234', 2, 1000.00);

INSERT INTO EMPLOYEE ( EMPLOYEE_FIRSTNAME, EMPLOYEE_LASTNAME, EMPLOYEE_ADDRESS, 
                       EMPLOYEE_SUPER_ID, EMPLOYEE_DEPARTMENT, EMPLOYEE_EMAIL,
                       EMPLOYEE_PASSWORD, EMPLOYEE_TITLE, EMPLOYEE_FUNDS)
VALUES ( 'Duke', 'Earl', 30010, NULL, 2, 'dearl@work.com', '1234', 0, 1000.00);
INSERT INTO EMPLOYEE ( EMPLOYEE_FIRSTNAME, EMPLOYEE_LASTNAME, EMPLOYEE_ADDRESS, EMPLOYEE_SUPER_ID, EMPLOYEE_DEPARTMENT, EMPLOYEE_EMAIL, EMPLOYEE_PASSWORD, EMPLOYEE_TITLE, EMPLOYEE_FUNDS)
VALUES ( 'Uriel', 'Tchfuncta', 30011, NULL, 2, 'utchfuncta@work.com', '1234', 1, 1000.00);
INSERT INTO EMPLOYEE ( EMPLOYEE_FIRSTNAME, EMPLOYEE_LASTNAME, EMPLOYEE_ADDRESS, EMPLOYEE_SUPER_ID, EMPLOYEE_DEPARTMENT, EMPLOYEE_EMAIL, EMPLOYEE_PASSWORD, EMPLOYEE_TITLE, EMPLOYEE_FUNDS)
VALUES ( 'Beau', 'Breaux', 30012, NULL, 2, 'bbreaux@work.com', '1234', 2, 1000.00);
INSERT INTO EMPLOYEE ( EMPLOYEE_FIRSTNAME, EMPLOYEE_LASTNAME, EMPLOYEE_ADDRESS, EMPLOYEE_SUPER_ID, EMPLOYEE_DEPARTMENT, EMPLOYEE_EMAIL, EMPLOYEE_PASSWORD, EMPLOYEE_TITLE, EMPLOYEE_FUNDS)
VALUES ( 'Lucie', 'Goose', 30013, NULL, 2, 'lgoose@work.com', '1234', 2, 1000.00);
INSERT INTO EMPLOYEE ( EMPLOYEE_FIRSTNAME, EMPLOYEE_LASTNAME, EMPLOYEE_ADDRESS, EMPLOYEE_SUPER_ID, EMPLOYEE_DEPARTMENT, EMPLOYEE_EMAIL, EMPLOYEE_PASSWORD, EMPLOYEE_TITLE, EMPLOYEE_FUNDS)
VALUES ( 'Max', 'Wart', 30014, NULL, 2, 'mwart@work.com', '1234', 2, 1000.00);

INSERT INTO EMPLOYEE ( EMPLOYEE_FIRSTNAME, EMPLOYEE_LASTNAME, EMPLOYEE_ADDRESS, 
                       EMPLOYEE_SUPER_ID, EMPLOYEE_DEPARTMENT, EMPLOYEE_EMAIL,
                       EMPLOYEE_PASSWORD, EMPLOYEE_TITLE, EMPLOYEE_FUNDS)
VALUES ( 'Nice', 'Guy', 30015, NULL, 3, 'nguy@work.com', '1234', 3, 1000.00);
INSERT INTO EMPLOYEE ( EMPLOYEE_FIRSTNAME, EMPLOYEE_LASTNAME, EMPLOYEE_ADDRESS, EMPLOYEE_SUPER_ID, EMPLOYEE_DEPARTMENT, EMPLOYEE_EMAIL, EMPLOYEE_PASSWORD, EMPLOYEE_TITLE, EMPLOYEE_FUNDS)
VALUES ( 'Difficult', 'Person', 30016, NULL, 3, 'dperson@work.com', '1234', 3, 1000.00);
INSERT INTO EMPLOYEE ( EMPLOYEE_FIRSTNAME, EMPLOYEE_LASTNAME, EMPLOYEE_ADDRESS, EMPLOYEE_SUPER_ID, EMPLOYEE_DEPARTMENT, EMPLOYEE_EMAIL, EMPLOYEE_PASSWORD, EMPLOYEE_TITLE, EMPLOYEE_FUNDS)
VALUES ( 'Matt', 'Shrugs', 30017, NULL, 3, 'mshrugs@work.com', '1234', 3, 1000.00);

UPDATE EMPLOYEE SET EMPLOYEE_SUPER_ID = 10000 WHERE EMPLOYEE_ID = 10000;

UPDATE EMPLOYEE SET EMPLOYEE_SUPER_ID = 10000 WHERE EMPLOYEE_ID = 10001;

UPDATE EMPLOYEE SET EMPLOYEE_SUPER_ID = 10001 WHERE EMPLOYEE_ID = 10002;
UPDATE EMPLOYEE SET EMPLOYEE_SUPER_ID = 10001 WHERE EMPLOYEE_ID = 10003;
UPDATE EMPLOYEE SET EMPLOYEE_SUPER_ID = 10001 WHERE EMPLOYEE_ID = 10004;


UPDATE EMPLOYEE SET EMPLOYEE_SUPER_ID = 10005 WHERE EMPLOYEE_ID = 10005;

UPDATE EMPLOYEE SET EMPLOYEE_SUPER_ID = 10005 WHERE EMPLOYEE_ID = 10006;

UPDATE EMPLOYEE SET EMPLOYEE_SUPER_ID = 10006 WHERE EMPLOYEE_ID = 10007;
UPDATE EMPLOYEE SET EMPLOYEE_SUPER_ID = 10006 WHERE EMPLOYEE_ID = 10008;
UPDATE EMPLOYEE SET EMPLOYEE_SUPER_ID = 10006 WHERE EMPLOYEE_ID = 10009;


UPDATE EMPLOYEE SET EMPLOYEE_SUPER_ID = 10010 WHERE EMPLOYEE_ID = 10010;

UPDATE EMPLOYEE SET EMPLOYEE_SUPER_ID = 10010 WHERE EMPLOYEE_ID = 10011;

UPDATE EMPLOYEE SET EMPLOYEE_SUPER_ID = 10011 WHERE EMPLOYEE_ID = 10012;
UPDATE EMPLOYEE SET EMPLOYEE_SUPER_ID = 10011 WHERE EMPLOYEE_ID = 10013;
UPDATE EMPLOYEE SET EMPLOYEE_SUPER_ID = 10011 WHERE EMPLOYEE_ID = 10014;


UPDATE EMPLOYEE SET EMPLOYEE_SUPER_ID = 10015 WHERE EMPLOYEE_ID = 10015;
UPDATE EMPLOYEE SET EMPLOYEE_SUPER_ID = 10015 WHERE EMPLOYEE_ID = 10016;
UPDATE EMPLOYEE SET EMPLOYEE_SUPER_ID = 10015 WHERE EMPLOYEE_ID = 10017;

/******************************************************************************/
/******************************************************************************/
/*REQUEST_STATUS***************************************************************/
DROP TABLE REQUEST_STATUS CASCADE CONSTRAINTS PURGE;

CREATE TABLE REQUEST_STATUS(
    REQUEST_STATUS_ID   NUMBER NOT NULL,
    REQUEST_STATUS_NAME VARCHAR2(60) NOT NULL,
    CONSTRAINT PK_REQUEST_STATUS PRIMARY KEY (REQUEST_STATUS_ID)
);

ALTER TABLE REQUEST_STATUS ADD CONSTRAINT UNIQUE_NAME
    UNIQUE (REQUEST_STATUS_NAME);

INSERT INTO REQUEST_STATUS VALUES ( 0, 'SUBMITTED TO SUPERVISOR');
INSERT INTO REQUEST_STATUS VALUES ( 1, 'QUESTION TO SUPERVISOR');
INSERT INTO REQUEST_STATUS VALUES ( 2, 'SUBMITTED TO DEPT HEAD');
INSERT INTO REQUEST_STATUS VALUES ( 3, 'QUESTION TO DEPT HEAD');
INSERT INTO REQUEST_STATUS VALUES ( 4, 'SUBMITTED TO BENEFITS COORDINATOR');
INSERT INTO REQUEST_STATUS VALUES ( 5, 'QUESTION TO BENEFITS COORDINATOR');
INSERT INTO REQUEST_STATUS VALUES ( 6, 'APPROVED - PENDING');
INSERT INTO REQUEST_STATUS VALUES ( 7, 'DENIED');
INSERT INTO REQUEST_STATUS VALUES ( 8, 'QUESTION TO EMPLOYEE');
INSERT INTO REQUEST_STATUS VALUES ( 9, 'APPROVED - VERIFIED');

/******************************************************************************/
/******************************************************************************/
/*EVENT_TYPE*******************************************************************/
DROP TABLE EVENT_TYPE CASCADE CONSTRAINTS PURGE;

CREATE TABLE EVENT_TYPE(
    EVENT_TYPE_ID               NUMBER NOT NULL,
    EVENT_TYPE_NAME             VARCHAR2(60) NOT NULL,
    EVENT_TYPE_REIMBURSE_PER    NUMBER(8,5) NOT NULL,
    CONSTRAINT PK_EVENT_TYPE PRIMARY KEY (EVENT_TYPE_ID)
);

INSERT INTO EVENT_TYPE VALUES (0, 'university course', 80);
INSERT INTO EVENT_TYPE VALUES (1, 'seminar', 60);
INSERT INTO EVENT_TYPE VALUES (2, 'certification preparation', 75);
INSERT INTO EVENT_TYPE VALUES (3, 'certification', 100);
INSERT INTO EVENT_TYPE VALUES (4, 'technical training', 90);
INSERT INTO EVENT_TYPE VALUES (5, 'other', 30);


/******************************************************************************/
/******************************************************************************/
/*GRADING_FORMAT***************************************************************/
DROP TABLE GRADING_FORMAT CASCADE CONSTRAINTS PURGE;

CREATE TABLE GRADING_FORMAT(
    GRADING_FORMAT_ID           NUMBER NOT NULL,
    GRADING_FORMAT_NAME         VARCHAR2(40) NOT NULL,
    GRADING_FORMAT_PASS_GRADE   NUMBER(8,5) NOT NULL,
    CONSTRAINT PK_GRADING_FORMAT PRIMARY KEY (GRADING_FORMAT_ID)
);

INSERT INTO GRADING_FORMAT VALUES (0, 'percentage', 70);
INSERT INTO GRADING_FORMAT VALUES (1, 'pass/fail', 100);


/******************************************************************************/
/******************************************************************************/
/*REQUEST**********************************************************************/
DROP TABLE REQUEST CASCADE CONSTRAINTS PURGE;

CREATE TABLE REQUEST(
    REQUEST_ID              NUMBER NOT NULL,
    REQUEST_EMPLOYEE_ID     NUMBER NOT NULL,
    REQUEST_COST            NUMBER(10,2) NOT NULL,
    REQUEST_COURSE_DATE     DATE NOT NULL,
    REQUEST_STATUS          NUMBER NOT NULL,
    REQUEST_ADDRESS         NUMBER NOT NULL,
    REQUEST_DESCRIPTION     VARCHAR2(200) NOT NULL,
    REQUEST_EVENT_TYPE      NUMBER NOT NULL,
    REQUEST_GRADING_FORMAT  NUMBER NOT NULL,
    REQUEST_DAYS_MISSED     NUMBER,
    REQUEST_JUSTIFICATION   VARCHAR2(200) NOT NULL,
    CONSTRAINT PK_REQUEST PRIMARY KEY (REQUEST_ID)
);

DROP SEQUENCE REQUEST_ID_SEQ;

CREATE SEQUENCE REQUEST_ID_SEQ MINVALUE 1 MAXVALUE 999999999999999
    INCREMENT BY 1 START WITH 20000 NOCACHE NOORDER NOCYCLE;

CREATE OR REPLACE TRIGGER REQUEST_INSERT
    BEFORE INSERT ON REQUEST
    FOR EACH ROW
    BEGIN
        SELECT REQUEST_ID_SEQ.NEXTVAL INTO :NEW.REQUEST_ID FROM DUAL;
    END;
/

INSERT INTO REQUEST ( REQUEST_EMPLOYEE_ID, REQUEST_COST, REQUEST_COURSE_DATE, 
                       REQUEST_STATUS, REQUEST_ADDRESS, REQUEST_DESCRIPTION,
                       REQUEST_EVENT_TYPE, REQUEST_GRADING_FORMAT,
                       REQUEST_DAYS_MISSED, REQUEST_JUSTIFICATION)
VALUES ( 10004, 200.00, TO_DATE('15-JAN-18','DD-MON-YY'), 0, 30000, 
         'blah blah blah', 0, 0, 2, 'because');
INSERT INTO REQUEST ( REQUEST_EMPLOYEE_ID, REQUEST_COST, REQUEST_COURSE_DATE, REQUEST_STATUS, REQUEST_ADDRESS, REQUEST_DESCRIPTION, REQUEST_EVENT_TYPE, REQUEST_GRADING_FORMAT, REQUEST_DAYS_MISSED, REQUEST_JUSTIFICATION)
VALUES ( 10004, 200.00, TO_DATE('15-JAN-18','DD-MON-YY'), 0, 30000, 'blah blah blah', 0, 0, 2, 'because');
INSERT INTO REQUEST ( REQUEST_EMPLOYEE_ID, REQUEST_COST, REQUEST_COURSE_DATE, REQUEST_STATUS, REQUEST_ADDRESS, REQUEST_DESCRIPTION, REQUEST_EVENT_TYPE, REQUEST_GRADING_FORMAT, REQUEST_DAYS_MISSED, REQUEST_JUSTIFICATION)
VALUES ( 10003, 200.00, TO_DATE('15-JAN-18','DD-MON-YY'), 0, 30000, 'blah blah blah', 0, 0, 2, 'because');
INSERT INTO REQUEST ( REQUEST_EMPLOYEE_ID, REQUEST_COST, REQUEST_COURSE_DATE, REQUEST_STATUS, REQUEST_ADDRESS, REQUEST_DESCRIPTION, REQUEST_EVENT_TYPE, REQUEST_GRADING_FORMAT, REQUEST_DAYS_MISSED, REQUEST_JUSTIFICATION)
VALUES ( 10002, 200.00, TO_DATE('15-JAN-18','DD-MON-YY'), 0, 30000, 'blah blah blah', 0, 0, 2, 'because');
INSERT INTO REQUEST ( REQUEST_EMPLOYEE_ID, REQUEST_COST, REQUEST_COURSE_DATE, REQUEST_STATUS, REQUEST_ADDRESS, REQUEST_DESCRIPTION, REQUEST_EVENT_TYPE, REQUEST_GRADING_FORMAT, REQUEST_DAYS_MISSED, REQUEST_JUSTIFICATION)
VALUES ( 10001, 200.00, TO_DATE('15-JAN-18','DD-MON-YY'), 2, 30000, 'blah blah blah', 0, 0, 2, 'because');

INSERT INTO REQUEST ( REQUEST_EMPLOYEE_ID, REQUEST_COST, REQUEST_COURSE_DATE, 
                       REQUEST_STATUS, REQUEST_ADDRESS, REQUEST_DESCRIPTION,
                       REQUEST_EVENT_TYPE, REQUEST_GRADING_FORMAT,
                       REQUEST_DAYS_MISSED, REQUEST_JUSTIFICATION)
VALUES ( 10007, 300.00, TO_DATE('22-JAN-18','DD-MON-YY'), 0, 30000, 
         'blah blah blah', 0, 0, 2, 'because');
INSERT INTO REQUEST ( REQUEST_EMPLOYEE_ID, REQUEST_COST, REQUEST_COURSE_DATE, REQUEST_STATUS, REQUEST_ADDRESS, REQUEST_DESCRIPTION, REQUEST_EVENT_TYPE, REQUEST_GRADING_FORMAT, REQUEST_DAYS_MISSED, REQUEST_JUSTIFICATION)
VALUES ( 10007, 400.00, TO_DATE('23-JAN-18','DD-MON-YY'), 0, 30000, 'blah blah blah', 0, 0, 2, 'because');
INSERT INTO REQUEST ( REQUEST_EMPLOYEE_ID, REQUEST_COST, REQUEST_COURSE_DATE, REQUEST_STATUS, REQUEST_ADDRESS, REQUEST_DESCRIPTION, REQUEST_EVENT_TYPE, REQUEST_GRADING_FORMAT, REQUEST_DAYS_MISSED, REQUEST_JUSTIFICATION)
VALUES ( 10008, 300.00, TO_DATE('23-JAN-18','DD-MON-YY'), 0, 30000, 'blah blah blah', 0, 0, 2, 'because');
INSERT INTO REQUEST ( REQUEST_EMPLOYEE_ID, REQUEST_COST, REQUEST_COURSE_DATE, REQUEST_STATUS, REQUEST_ADDRESS, REQUEST_DESCRIPTION, REQUEST_EVENT_TYPE, REQUEST_GRADING_FORMAT, REQUEST_DAYS_MISSED, REQUEST_JUSTIFICATION)
VALUES ( 10008, 400.00, TO_DATE('23-JAN-18','DD-MON-YY'), 0, 30000, 'blah blah blah', 0, 0, 2, 'because');


INSERT INTO REQUEST ( REQUEST_EMPLOYEE_ID, REQUEST_COST, REQUEST_COURSE_DATE, REQUEST_STATUS, REQUEST_ADDRESS, REQUEST_DESCRIPTION,  REQUEST_EVENT_TYPE, REQUEST_GRADING_FORMAT,  REQUEST_DAYS_MISSED, REQUEST_JUSTIFICATION)
VALUES ( 10000, 200.00, TO_DATE('15-JAN-18','DD-MON-YY'), 4, 30000, 'Dept Head Training', 0, 0, 2, 'because I am Dept Head');
INSERT INTO REQUEST ( REQUEST_EMPLOYEE_ID, REQUEST_COST, REQUEST_COURSE_DATE, REQUEST_STATUS, REQUEST_ADDRESS, REQUEST_DESCRIPTION, REQUEST_EVENT_TYPE, REQUEST_GRADING_FORMAT, REQUEST_DAYS_MISSED, REQUEST_JUSTIFICATION)
VALUES ( 10001, 300.00, TO_DATE('15-JAN-18','DD-MON-YY'), 4, 30000, 'Manager Training', 0, 0, 2, 'because');
INSERT INTO REQUEST ( REQUEST_EMPLOYEE_ID, REQUEST_COST, REQUEST_COURSE_DATE, REQUEST_STATUS, REQUEST_ADDRESS, REQUEST_DESCRIPTION, REQUEST_EVENT_TYPE, REQUEST_GRADING_FORMAT, REQUEST_DAYS_MISSED, REQUEST_JUSTIFICATION)
VALUES ( 10002, 400.00, TO_DATE('15-JAN-18','DD-MON-YY'), 4, 30000, 'Employee Training', 0, 0, 2, 'because');
INSERT INTO REQUEST ( REQUEST_EMPLOYEE_ID, REQUEST_COST, REQUEST_COURSE_DATE, REQUEST_STATUS, REQUEST_ADDRESS, REQUEST_DESCRIPTION, REQUEST_EVENT_TYPE, REQUEST_GRADING_FORMAT, REQUEST_DAYS_MISSED, REQUEST_JUSTIFICATION)
VALUES ( 10002, 200.00, TO_DATE('15-JAN-18','DD-MON-YY'), 2, 30000, 'blah blah blah', 0, 0, 2, 'because');
INSERT INTO REQUEST ( REQUEST_EMPLOYEE_ID, REQUEST_COST, REQUEST_COURSE_DATE, REQUEST_STATUS, REQUEST_ADDRESS, REQUEST_DESCRIPTION, REQUEST_EVENT_TYPE, REQUEST_GRADING_FORMAT, REQUEST_DAYS_MISSED, REQUEST_JUSTIFICATION)
VALUES ( 10003, 200.00, TO_DATE('15-JAN-18','DD-MON-YY'), 2, 30000, 'blah blah blah', 0, 0, 2, 'because');
INSERT INTO REQUEST ( REQUEST_EMPLOYEE_ID, REQUEST_COST, REQUEST_COURSE_DATE, REQUEST_STATUS, REQUEST_ADDRESS, REQUEST_DESCRIPTION, REQUEST_EVENT_TYPE, REQUEST_GRADING_FORMAT, REQUEST_DAYS_MISSED, REQUEST_JUSTIFICATION)
VALUES ( 10003, 300.00, TO_DATE('22-JAN-18','DD-MON-YY'), 2, 30000, 'blah blah blah', 0, 0, 2, 'because');

INSERT INTO REQUEST ( REQUEST_EMPLOYEE_ID, REQUEST_COST, REQUEST_COURSE_DATE, REQUEST_STATUS, REQUEST_ADDRESS, REQUEST_DESCRIPTION, REQUEST_EVENT_TYPE, REQUEST_GRADING_FORMAT, REQUEST_DAYS_MISSED, REQUEST_JUSTIFICATION)
VALUES ( 10003, 200.00, TO_DATE('15-JAN-18','DD-MON-YY'), 1, 30000, 'blah blah blah', 0, 0, 2, 'because');
INSERT INTO REQUEST ( REQUEST_EMPLOYEE_ID, REQUEST_COST, REQUEST_COURSE_DATE, REQUEST_STATUS, REQUEST_ADDRESS, REQUEST_DESCRIPTION, REQUEST_EVENT_TYPE, REQUEST_GRADING_FORMAT, REQUEST_DAYS_MISSED, REQUEST_JUSTIFICATION)
VALUES ( 10003, 300.00, TO_DATE('22-JAN-18','DD-MON-YY'), 3, 30000, 'blah blah blah', 0, 0, 2, 'because');
INSERT INTO REQUEST ( REQUEST_EMPLOYEE_ID, REQUEST_COST, REQUEST_COURSE_DATE, REQUEST_STATUS, REQUEST_ADDRESS, REQUEST_DESCRIPTION, REQUEST_EVENT_TYPE, REQUEST_GRADING_FORMAT, REQUEST_DAYS_MISSED, REQUEST_JUSTIFICATION)
VALUES ( 10003, 200.00, TO_DATE('15-JAN-18','DD-MON-YY'), 4, 30000, 'blah blah blah', 0, 0, 2, 'because');
INSERT INTO REQUEST ( REQUEST_EMPLOYEE_ID, REQUEST_COST, REQUEST_COURSE_DATE, REQUEST_STATUS, REQUEST_ADDRESS, REQUEST_DESCRIPTION, REQUEST_EVENT_TYPE, REQUEST_GRADING_FORMAT, REQUEST_DAYS_MISSED, REQUEST_JUSTIFICATION)
VALUES ( 10003, 300.00, TO_DATE('22-JAN-18','DD-MON-YY'), 5, 30000, 'blah blah blah', 0, 0, 2, 'because');
INSERT INTO REQUEST ( REQUEST_EMPLOYEE_ID, REQUEST_COST, REQUEST_COURSE_DATE, REQUEST_STATUS, REQUEST_ADDRESS, REQUEST_DESCRIPTION, REQUEST_EVENT_TYPE, REQUEST_GRADING_FORMAT, REQUEST_DAYS_MISSED, REQUEST_JUSTIFICATION)
VALUES ( 10003, 200.00, TO_DATE('15-JAN-18','DD-MON-YY'), 6, 30000, 'blah blah blah', 0, 0, 2, 'because');
INSERT INTO REQUEST ( REQUEST_EMPLOYEE_ID, REQUEST_COST, REQUEST_COURSE_DATE, REQUEST_STATUS, REQUEST_ADDRESS, REQUEST_DESCRIPTION, REQUEST_EVENT_TYPE, REQUEST_GRADING_FORMAT, REQUEST_DAYS_MISSED, REQUEST_JUSTIFICATION)
VALUES ( 10003, 300.00, TO_DATE('22-JAN-18','DD-MON-YY'), 7, 30000, 'blah blah blah', 0, 0, 2, 'because');
INSERT INTO REQUEST ( REQUEST_EMPLOYEE_ID, REQUEST_COST, REQUEST_COURSE_DATE, REQUEST_STATUS, REQUEST_ADDRESS, REQUEST_DESCRIPTION, REQUEST_EVENT_TYPE, REQUEST_GRADING_FORMAT, REQUEST_DAYS_MISSED, REQUEST_JUSTIFICATION)
VALUES ( 10003, 200.00, TO_DATE('15-JAN-18','DD-MON-YY'), 8, 30000, 'blah blah blah', 0, 0, 2, 'because');

        
/******************************************************************************/
/******************************************************************************/
/*ATTACHMENT*******************************************************************/
DROP TABLE ATTACHMENT CASCADE CONSTRAINTS PURGE;

CREATE TABLE ATTACHMENT(
    ATTACHMENT_ID               NUMBER NOT NULL,
    ATTACHMENT_FILENAME         VARCHAR2(100) NOT NULL,
    ATTACHMENT_DIRECTORY        VARCHAR2(100) NOT NULL,
    ATTACHMENT_REQUEST_ID       NUMBER NOT NULL,
    ATTACHMENT_APPROVAL_TYPE    NUMBER, 
    CONSTRAINT PK_ATTACHMENT PRIMARY KEY (ATTACHMENT_ID)
);

ALTER TABLE ATTACHMENT ADD CONSTRAINT UNIQUE_FILENAME
    UNIQUE (ATTACHMENT_FILENAME);

DROP SEQUENCE ATTCH_ID_SEQ;

CREATE SEQUENCE ATTCH_ID_SEQ MINVALUE 1 MAXVALUE 999999999999999
    INCREMENT BY 1 START WITH 30000 NOCACHE NOORDER NOCYCLE;
    
CREATE OR REPLACE TRIGGER ATTACHMENT_INSERT
    BEFORE INSERT ON ATTACHMENT
    FOR EACH ROW
    BEGIN
        SELECT ATTCH_ID_SEQ.NEXTVAL INTO :NEW.ATTACHMENT_ID FROM DUAL;
    END;
/


/******************************************************************************/
/******************************************************************************/
/******************************************************************************/
/******************************************************************************/
/*ADD FOREIGN KEYS*/
--
--ALTER TABLE EMPLOYEE ADD CONSTRAINT FK_EMPLOYEE_SUPER
--    FOREIGN KEY (EMPLOYEE_SUPER_ID) REFERENCES
--    EMPLOYEE (EMPLOYEE_ID)
--    ON DELETE SET NULL;
--
--ALTER TABLE EMPLOYEE ADD CONSTRAINT FK_EMPLOYEE_ADDRESS
--    FOREIGN KEY (EMPLOYEE_ADDRESS) REFERENCES
--    ADDRESS (ADDRESS_ID);
--
--ALTER TABLE EMPLOYEE ADD CONSTRAINT FK_EMPLOYEE_TITLE
--    FOREIGN KEY (EMPLOYEE_TITLE) REFERENCES
--    EMPLOYEE_TITLE (EMPLOYEE_TITLE_ID);
----
--ALTER TABLE REQUEST ADD CONSTRAINT FK_REQUEST_EMPLOYEE
--    FOREIGN KEY (REQUEST_EMPLOYEE_ID) REFERENCES
--    EMPLOYEE (EMPLOYEE_ID)
--    ON DELETE SET NULL;
--
--ALTER TABLE REQUEST ADD CONSTRAINT FK_REQUEST_ADDRESS
--    FOREIGN KEY (REQUEST_ADDRESS) REFERENCES
--    ADDRESS (ADDRESS_ID);
--
--ALTER TABLE REQUEST ADD CONSTRAINT FK_REQUEST_STATUS
--    FOREIGN KEY (REQUEST_STATUS) REFERENCES
--    REQUEST_STATUS (REQUEST_STATUS_ID);
--
--ALTER TABLE REQUEST ADD CONSTRAINT FK_REQUEST_GRADING_FORMAT
--    FOREIGN KEY (REQUEST_GRADING_FORMAT) REFERENCES
--    GRADING_FORMAT (GRADING_FORMAT_ID);
----
--ALTER TABLE ATTACHMENT ADD CONSTRAINT FK_ATTACHMENT_REQUEST
--    FOREIGN KEY (ATTACHMENT_REQUEST_ID) REFERENCES
--    REQUEST (REQUEST_ID);
--
--ALTER TABLE ATTACHMENT ADD CONSTRAINT FK_ATTACHMENT_REQUEST_STATUS
--    FOREIGN KEY (ATTACHMENT_APPROVAL_TYPE) REFERENCES
--    REQUEST_STATUS (REQUEST_STATUS_ID);
----
--

/******************************************************************************/
/******************************************************************************/
/******************************************************************************/
/*STORED PROCEDURES*/
----------------------------------------------------------------------------------
---- READ ALL ROWS FROM TABLE
----------------------------------------------------------------------------------

CREATE OR REPLACE PROCEDURE READ_ALL_EMPLOYEES(OUT_CURS OUT SYS_REFCURSOR) AS
    BEGIN
        OPEN OUT_CURS FOR SELECT
        E.EMPLOYEE_ID, --1
        E.EMPLOYEE_FIRSTNAME, --2
        E.EMPLOYEE_LASTNAME, --3
        ADDRESS_STREET_ADDRESS, --4
        ADDRESS_CITY, --5
        ADDRESS_STATE, --6
        ADDRESS_ZIP, --7
        SUPER.EMPLOYEE_ID, --8
        SUPER.EMPLOYEE_FIRSTNAME, --9
        SUPER.EMPLOYEE_LASTNAME, --10
        DEPARTMENT_NAME, --11
        DEPARTMENT_ID, --12
        E.EMPLOYEE_EMAIL, --13
        EMPLOYEE_TITLE_NAME --14
        FROM EMPLOYEE E
        INNER JOIN ADDRESS A ON E.EMPLOYEE_ADDRESS = A.ADDRESS_ID
        INNER JOIN EMPLOYEE SUPER ON E.EMPLOYEE_SUPER_ID = SUPER.EMPLOYEE_ID
        INNER JOIN EMPLOYEE_TITLE T ON E.EMPLOYEE_TITLE = T.EMPLOYEE_TITLE_ID
        INNER JOIN DEPARTMENT D ON E.EMPLOYEE_DEPARTMENT = D.DEPARTMENT_ID;
    END;
/

CREATE OR REPLACE PROCEDURE READ_EMPLOYEES_BY_DEPT(
    ID IN NUMBER,
    OUT_CURS OUT SYS_REFCURSOR)
    AS
    BEGIN
        OPEN OUT_CURS FOR SELECT
        E.EMPLOYEE_ID, --1
        E.EMPLOYEE_FIRSTNAME, --2
        E.EMPLOYEE_LASTNAME, --3
        ADDRESS_STREET_ADDRESS, --4
        ADDRESS_CITY, --5
        ADDRESS_STATE, --6
        ADDRESS_ZIP, --7
        SUPER.EMPLOYEE_ID, --8
        SUPER.EMPLOYEE_FIRSTNAME, --9
        SUPER.EMPLOYEE_LASTNAME, --10
        DEPARTMENT_NAME, --11
        DEPARTMENT_ID, --12
        E.EMPLOYEE_EMAIL, --13
        EMPLOYEE_TITLE_NAME --14
        FROM EMPLOYEE E
        INNER JOIN ADDRESS A ON E.EMPLOYEE_ADDRESS = A.ADDRESS_ID
        INNER JOIN EMPLOYEE SUPER ON E.EMPLOYEE_SUPER_ID = SUPER.EMPLOYEE_ID
        INNER JOIN EMPLOYEE_TITLE T ON E.EMPLOYEE_TITLE = T.EMPLOYEE_TITLE_ID
        INNER JOIN DEPARTMENT D ON E.EMPLOYEE_DEPARTMENT = D.DEPARTMENT_ID
        WHERE E.EMPLOYEE_DEPARTMENT = ID;
    END;
/

CREATE OR REPLACE PROCEDURE READ_EMPLOYEES_BY_DEPT_NAME(
    NAME IN VARCHAR2,
    OUT_CURS OUT SYS_REFCURSOR)
    AS
    BEGIN
        OPEN OUT_CURS FOR SELECT
        E.EMPLOYEE_ID, --1
        E.EMPLOYEE_FIRSTNAME, --2
        E.EMPLOYEE_LASTNAME, --3
        ADDRESS_STREET_ADDRESS, --4
        ADDRESS_CITY, --5
        ADDRESS_STATE, --6
        ADDRESS_ZIP, --7
        SUPER.EMPLOYEE_ID, --8
        SUPER.EMPLOYEE_FIRSTNAME, --9
        SUPER.EMPLOYEE_LASTNAME, --10
        DEPARTMENT_NAME, --11
        DEPARTMENT_ID, --12
        E.EMPLOYEE_EMAIL, --13
        EMPLOYEE_TITLE_NAME --14
        FROM EMPLOYEE E
        INNER JOIN ADDRESS A ON E.EMPLOYEE_ADDRESS = A.ADDRESS_ID
        INNER JOIN EMPLOYEE SUPER ON E.EMPLOYEE_SUPER_ID = SUPER.EMPLOYEE_ID
        INNER JOIN EMPLOYEE_TITLE T ON E.EMPLOYEE_TITLE = T.EMPLOYEE_TITLE_ID
        INNER JOIN DEPARTMENT D ON E.EMPLOYEE_DEPARTMENT = D.DEPARTMENT_ID
        WHERE E.EMPLOYEE_DEPARTMENT = 
        (SELECT DEPARTMENT_ID FROM DEPARTMENT WHERE DEPARTMENT_NAME = NAME);
    END;
/

CREATE OR REPLACE PROCEDURE READ_EMPLOYEE_BY_EMAIL(
    EMAIL IN VARCHAR2,
    OUT_CURS OUT SYS_REFCURSOR)
    AS
    BEGIN
        OPEN OUT_CURS FOR SELECT
        E.EMPLOYEE_ID, --1
        E.EMPLOYEE_FIRSTNAME, --2
        E.EMPLOYEE_LASTNAME, --3
        ADDRESS_STREET_ADDRESS, --4
        ADDRESS_CITY, --5
        ADDRESS_STATE, --6
        ADDRESS_ZIP, --7
        SUPER.EMPLOYEE_ID, --8
        SUPER.EMPLOYEE_FIRSTNAME, --9
        SUPER.EMPLOYEE_LASTNAME, --10
        DEPARTMENT_NAME, --11
        DEPARTMENT_ID, --12
        E.EMPLOYEE_EMAIL, --13
        EMPLOYEE_TITLE_NAME --14
        FROM EMPLOYEE E
        INNER JOIN ADDRESS A ON E.EMPLOYEE_ADDRESS = A.ADDRESS_ID
        INNER JOIN EMPLOYEE SUPER ON E.EMPLOYEE_SUPER_ID = SUPER.EMPLOYEE_ID
        INNER JOIN EMPLOYEE_TITLE T ON E.EMPLOYEE_TITLE = T.EMPLOYEE_TITLE_ID
        INNER JOIN DEPARTMENT D ON E.EMPLOYEE_DEPARTMENT = D.DEPARTMENT_ID
        WHERE E.EMPLOYEE_EMAIL = EMAIL;
    END;
/

CREATE OR REPLACE PROCEDURE READ_EMPLOYEE_BY_ID(
    ID IN NUMBER,
    OUT_CURS OUT SYS_REFCURSOR)
    AS
    BEGIN
        OPEN OUT_CURS FOR SELECT
        E.EMPLOYEE_FUNDS, --E.EMPLOYEE_ID, --1
        E.EMPLOYEE_FIRSTNAME, --2
        E.EMPLOYEE_LASTNAME, --3
        ADDRESS_STREET_ADDRESS, --4
        ADDRESS_CITY, --5
        ADDRESS_STATE, --6
        ADDRESS_ZIP, --7
        SUPER.EMPLOYEE_ID, --8
        SUPER.EMPLOYEE_FIRSTNAME, --9
        SUPER.EMPLOYEE_LASTNAME, --10
        DEPARTMENT_NAME, --11
        DEPARTMENT_ID, --12
        E.EMPLOYEE_EMAIL, --13
        EMPLOYEE_TITLE_NAME, --14
        E.EMPLOYEE_FUNDS --15
        FROM EMPLOYEE E
        INNER JOIN ADDRESS A ON E.EMPLOYEE_ADDRESS = A.ADDRESS_ID
        INNER JOIN EMPLOYEE SUPER ON E.EMPLOYEE_SUPER_ID = SUPER.EMPLOYEE_ID
        INNER JOIN EMPLOYEE_TITLE T ON E.EMPLOYEE_TITLE = T.EMPLOYEE_TITLE_ID
        INNER JOIN DEPARTMENT D ON E.EMPLOYEE_DEPARTMENT = D.DEPARTMENT_ID
        WHERE E.EMPLOYEE_ID = ID;
    END;
/

CREATE OR REPLACE PROCEDURE READ_ALL_REQUESTS(OUT_CURS OUT SYS_REFCURSOR) AS
    BEGIN
        OPEN OUT_CURS FOR SELECT 
        REQUEST_ID, --1
        EMPLOYEE_ID, --2
        EMPLOYEE_FIRSTNAME, --3
        EMPLOYEE_LASTNAME, --4
        DEPARTMENT_NAME, --5
        REQUEST_COST, --6
        REQUEST_COURSE_DATE, --7
        REQUEST_STATUS_ID, --8
        ADDRESS_STREET_ADDRESS, --9
        ADDRESS_CITY, --10
        ADDRESS_STATE, --11
        ADDRESS_ZIP, --12
        REQUEST_DESCRIPTION, --13
        EVENT_TYPE_ID, --14
        EVENT_TYPE_REIMBURSE_PER, --15
        GRADING_FORMAT_ID, --16
        GRADING_FORMAT_PASS_GRADE, --17
        REQUEST_DAYS_MISSED, --18
        REQUEST_JUSTIFICATION --19
        FROM REQUEST
        INNER JOIN EMPLOYEE ON REQUEST_EMPLOYEE_ID = EMPLOYEE_ID
        INNER JOIN DEPARTMENT ON EMPLOYEE_DEPARTMENT = DEPARTMENT_ID
        INNER JOIN ADDRESS ON REQUEST_ADDRESS = ADDRESS_ID
        INNER JOIN EVENT_TYPE ON REQUEST_EVENT_TYPE = EVENT_TYPE_ID
        INNER JOIN GRADING_FORMAT ON REQUEST_GRADING_FORMAT = GRADING_FORMAT_ID
        INNER JOIN REQUEST_STATUS ON REQUEST_STATUS = REQUEST_STATUS_ID;
    END;
/

CREATE OR REPLACE PROCEDURE READ_ALL_ATTACHMENTS(OUT_CURS OUT SYS_REFCURSOR) AS
    BEGIN
        OPEN OUT_CURS FOR
        SELECT
        A.ATTACHMENT_ID,
        A.ATTACHMENT_FILENAME,
        A.ATTACHMENT_DIRECTORY,
        A.ATTACHMENT_REQUEST_ID,
        R.REQUEST_STATUS_NAME
        FROM ATTACHMENT A JOIN REQUEST_STATUS R
            ON REQUEST_STATUS_ID = ATTACHMENT_APPROVAL_TYPE;
    END;
/

CREATE OR REPLACE PROCEDURE READ_ATTACHMENTS_BY_EMPLOYEE(
    ID IN NUMBER,
    OUT_CURS OUT SYS_REFCURSOR)
    AS
    BEGIN
        OPEN OUT_CURS FOR
        SELECT
        A.ATTACHMENT_ID,
        A.ATTACHMENT_FILENAME,
        A.ATTACHMENT_DIRECTORY,
        A.ATTACHMENT_REQUEST_ID,
        R.REQUEST_STATUS_NAME
        FROM ATTACHMENT A JOIN REQUEST_STATUS R
            ON REQUEST_STATUS_ID = ATTACHMENT_APPROVAL_TYPE
        WHERE ATTACHMENT_REQUEST_ID = 
            (SELECT REQUEST_ID FROM REQUEST WHERE REQUEST_EMPLOYEE_ID = ID);
    END;
/

CREATE OR REPLACE PROCEDURE READ_REQUEST_BY_ID(
    ID IN NUMBER,
    OUT_CURS OUT SYS_REFCURSOR)
   AS
    BEGIN
        OPEN OUT_CURS FOR SELECT 
        REQUEST_ID,  --1
        EMPLOYEE_ID,  --2
        EMPLOYEE_FIRSTNAME, --3
        EMPLOYEE_LASTNAME, --4
        DEPARTMENT_NAME, --5
        REQUEST_COST, --6
        REQUEST_COURSE_DATE, --7
        REQUEST_STATUS_ID, ----8
        ADDRESS_STREET_ADDRESS, --9
        ADDRESS_CITY, --10
        ADDRESS_STATE, --11
        ADDRESS_ZIP, --12
        REQUEST_DESCRIPTION, --13
        EVENT_TYPE_ID, --14
        EVENT_TYPE_REIMBURSE_PER, --15
        GRADING_FORMAT_ID, --16
        GRADING_FORMAT_PASS_GRADE, --17
        REQUEST_DAYS_MISSED, --18
        REQUEST_JUSTIFICATION --19
        FROM REQUEST
        INNER JOIN EMPLOYEE ON REQUEST_EMPLOYEE_ID = EMPLOYEE_ID
        INNER JOIN DEPARTMENT ON EMPLOYEE_DEPARTMENT = DEPARTMENT_ID
        INNER JOIN ADDRESS ON REQUEST_ADDRESS = ADDRESS_ID
        INNER JOIN EVENT_TYPE ON REQUEST_EVENT_TYPE = EVENT_TYPE_ID
        INNER JOIN GRADING_FORMAT ON REQUEST_GRADING_FORMAT = GRADING_FORMAT_ID
        INNER JOIN REQUEST_STATUS ON REQUEST_STATUS = REQUEST_STATUS_ID
        WHERE REQUEST_ID = ID;
    END;
/


CREATE OR REPLACE PROCEDURE READ_REQUESTS_BY_EMPLOYEE(
    ID IN NUMBER,
    OUT_CURS OUT SYS_REFCURSOR)
   AS
    BEGIN
        OPEN OUT_CURS FOR SELECT 
        REQUEST_ID,  --1
        EMPLOYEE_ID,  --2
        EMPLOYEE_FIRSTNAME, --3
        EMPLOYEE_LASTNAME, --4
        DEPARTMENT_NAME, --5
        REQUEST_COST, --6
        REQUEST_COURSE_DATE, --7
        REQUEST_STATUS_ID, ----8
        ADDRESS_STREET_ADDRESS, --9
        ADDRESS_CITY, --10
        ADDRESS_STATE, --11
        ADDRESS_ZIP, --12
        REQUEST_DESCRIPTION, --13
        EVENT_TYPE_ID, --14
        EVENT_TYPE_REIMBURSE_PER, --15
        GRADING_FORMAT_ID, --16
        GRADING_FORMAT_PASS_GRADE, --17
        REQUEST_DAYS_MISSED, --18
        REQUEST_JUSTIFICATION --19
        FROM REQUEST
        INNER JOIN EMPLOYEE ON REQUEST_EMPLOYEE_ID = EMPLOYEE_ID
        INNER JOIN DEPARTMENT ON EMPLOYEE_DEPARTMENT = DEPARTMENT_ID
        INNER JOIN ADDRESS ON REQUEST_ADDRESS = ADDRESS_ID
        INNER JOIN EVENT_TYPE ON REQUEST_EVENT_TYPE = EVENT_TYPE_ID
        INNER JOIN GRADING_FORMAT ON REQUEST_GRADING_FORMAT = GRADING_FORMAT_ID
        INNER JOIN REQUEST_STATUS ON REQUEST_STATUS = REQUEST_STATUS_ID
        WHERE REQUEST_EMPLOYEE_ID = ID;
    END;
/


CREATE OR REPLACE PROCEDURE READ_SUB_REQUESTS_BY_EMPLOYEE(
    ID IN NUMBER,
    OUT_CURS OUT SYS_REFCURSOR)
   AS
    BEGIN
        OPEN OUT_CURS FOR SELECT 
        REQUEST_ID, --1
        E.EMPLOYEE_ID, --2
        E.EMPLOYEE_FIRSTNAME, --3
        E.EMPLOYEE_LASTNAME, --4
        DEPARTMENT_NAME, --5
        REQUEST_COST, --6
        REQUEST_COURSE_DATE, --7
        REQUEST_STATUS_ID, --8
        ADDRESS_STREET_ADDRESS, --9
        ADDRESS_CITY, --10
        ADDRESS_STATE, --11
        ADDRESS_ZIP, --12
        REQUEST_DESCRIPTION, --13
        EVENT_TYPE_ID, --14
        EVENT_TYPE_REIMBURSE_PER, --15
        GRADING_FORMAT_ID, --16
        GRADING_FORMAT_PASS_GRADE, --17
        REQUEST_DAYS_MISSED, --18
        REQUEST_JUSTIFICATION --19
        FROM REQUEST
        INNER JOIN EMPLOYEE E ON REQUEST_EMPLOYEE_ID = EMPLOYEE_ID
        INNER JOIN DEPARTMENT ON EMPLOYEE_DEPARTMENT = DEPARTMENT_ID
        INNER JOIN ADDRESS ON REQUEST_ADDRESS = ADDRESS_ID
        INNER JOIN EVENT_TYPE ON REQUEST_EVENT_TYPE = EVENT_TYPE_ID
        INNER JOIN GRADING_FORMAT ON REQUEST_GRADING_FORMAT = GRADING_FORMAT_ID
        INNER JOIN REQUEST_STATUS ON REQUEST_STATUS = REQUEST_STATUS_ID
        WHERE E.EMPLOYEE_SUPER_ID = ID;
    END;
/

CREATE OR REPLACE PROCEDURE READ_SUB_REQUESTS_BY_DEPT(
    DEPT_ID IN NUMBER,
    OUT_CURS OUT SYS_REFCURSOR)
   AS
    BEGIN
        OPEN OUT_CURS FOR SELECT 
        REQUEST_ID, --1
        E.EMPLOYEE_ID, --2
        E.EMPLOYEE_FIRSTNAME, --3
        E.EMPLOYEE_LASTNAME, --4
        DEPARTMENT_ID, --5
        REQUEST_COST, --6
        REQUEST_COURSE_DATE, --7
        REQUEST_STATUS_ID, --8
        ADDRESS_STREET_ADDRESS, --9
        ADDRESS_CITY, --10
        ADDRESS_STATE, --11
        ADDRESS_ZIP, --12
        REQUEST_DESCRIPTION, --13
        EVENT_TYPE_ID, --14
        EVENT_TYPE_REIMBURSE_PER, --15
        GRADING_FORMAT_ID, --16
        GRADING_FORMAT_PASS_GRADE, --17
        REQUEST_DAYS_MISSED, --18
        REQUEST_JUSTIFICATION --19
        FROM REQUEST
        INNER JOIN EMPLOYEE E ON REQUEST_EMPLOYEE_ID = EMPLOYEE_ID
        INNER JOIN DEPARTMENT ON EMPLOYEE_DEPARTMENT = DEPARTMENT_ID
        INNER JOIN ADDRESS ON REQUEST_ADDRESS = ADDRESS_ID
        INNER JOIN EVENT_TYPE ON REQUEST_EVENT_TYPE = EVENT_TYPE_ID
        INNER JOIN GRADING_FORMAT ON REQUEST_GRADING_FORMAT = GRADING_FORMAT_ID
        INNER JOIN REQUEST_STATUS ON REQUEST_STATUS = REQUEST_STATUS_ID
        WHERE E.EMPLOYEE_DEPARTMENT = DEPT_ID;
    END;
/


CREATE OR REPLACE PROCEDURE READ_ATTACHMENTS_BY_REQUEST(
    ID IN NUMBER,
    OUT_CURS OUT SYS_REFCURSOR)
    AS
    BEGIN
        OPEN OUT_CURS FOR
        SELECT
        A.ATTACHMENT_ID,
        A.ATTACHMENT_FILENAME,
        A.ATTACHMENT_DIRECTORY,
        A.ATTACHMENT_REQUEST_ID,
        R.REQUEST_STATUS_NAME
        FROM ATTACHMENT A JOIN REQUEST_STATUS R
            ON REQUEST_STATUS_ID = ATTACHMENT_APPROVAL_TYPE
        WHERE ATTACHMENT_REQUEST_ID = ID;
    END;
/

CREATE OR REPLACE PROCEDURE READ_ALL_DEPARTMENTS(OUT_CURS OUT SYS_REFCURSOR) AS
    BEGIN
        OPEN OUT_CURS FOR
        SELECT DEPARTMENT_ID, DEPARTMENT_NAME FROM DEPARTMENT;
    END;
/

CREATE OR REPLACE PROCEDURE READ_ALL_EVENT_TYPES(OUT_CURS OUT SYS_REFCURSOR) AS
    BEGIN
        OPEN OUT_CURS FOR
        SELECT EVENT_TYPE_ID, EVENT_TYPE_NAME, EVENT_TYPE_REIMBURSE_PER
        FROM EVENT_TYPE;
    END;
/

CREATE OR REPLACE PROCEDURE READ_ALL_GRADING_FORMATS(OUT_CURS OUT SYS_REFCURSOR)
    AS
    BEGIN
        OPEN OUT_CURS FOR
        SELECT GRADING_FORMAT_ID, GRADING_FORMAT_NAME, GRADING_FORMAT_PASS_GRADE
        FROM GRADING_FORMAT;
    END;
/

CREATE OR REPLACE PROCEDURE READ_ALL_REQUEST_STATUSES
    (OUT_CURS OUT SYS_REFCURSOR) AS
    BEGIN
        OPEN OUT_CURS FOR
        SELECT REQUEST_STATUS_ID, REQUEST_STATUS_NAME FROM REQUEST_STATUS;
    END;
/


----------------------------------------------------------------------------------
---- INSERT
----------------------------------------------------------------------------------

CREATE OR REPLACE PROCEDURE INSERT_EMPLOYEE(
    FIRSTNAME IN VARCHAR2, --1
    LASTNAME IN VARCHAR2, --2
    STREET_ADDRESS IN VARCHAR2, --3
    CITY IN VARCHAR2, --4
    STATE IN VARCHAR2, --5
    ZIP IN VARCHAR2, --6
    SUPERVISOR_ID IN NUMBER, --7
    DEPARTMENT_ID IN NUMBER, --8
    EMAIL IN VARCHAR2, --9
    PASSWORD IN VARCHAR2, --10
    TITLE IN NUMBER, --11
    ADDRESS_ID_NUM OUT NUMBER) --12
--    TITLE_ID OUT NUMBER) --13
    AS      
    BEGIN
        BEGIN
            INSERT INTO ADDRESS (
            ADDRESS_STREET_ADDRESS,
            ADDRESS_CITY,
            ADDRESS_STATE,
            ADDRESS_ZIP)
            VALUES (
            STREET_ADDRESS,
            CITY,
            STATE,
            ZIP);
        EXCEPTION
            WHEN OTHERS THEN
            NULL;
        END;
        
        SELECT ADDRESS_ID INTO ADDRESS_ID_NUM FROM ADDRESS WHERE 
        ADDRESS_STREET_ADDRESS = STREET_ADDRESS AND
        ADDRESS_CITY = CITY AND
        ADDRESS_STATE = STATE AND
        ADDRESS_ZIP = ZIP;

--        BEGIN
--            INSERT INTO EMPLOYEE_TITLE (EMPLOYEE_TITLE_ID, EMPLOYEE_TITLE_NAME)
--            VALUES (ID_SEQ.NEXTVAL, TITLE);
--        EXCEPTION
--            WHEN OTHERS THEN
--            NULL;
--        END;
--
--        SELECT EMPLOYEE_TITLE_ID INTO TITLE_ID FROM EMPLOYEE_TITLE WHERE
--        EMPLOYEE_TITLE_NAME = TITLE;

        INSERT INTO EMPLOYEE (
        EMPLOYEE_FIRSTNAME,
        EMPLOYEE_LASTNAME,
        EMPLOYEE_ADDRESS,
        EMPLOYEE_SUPER_ID,
        EMPLOYEE_DEPARTMENT,
        EMPLOYEE_EMAIL,
        EMPLOYEE_PASSWORD,
        EMPLOYEE_TITLE,
        EMPLOYEE_FUNDS)
        VALUES (
        FIRSTNAME,
        LASTNAME,
        ADDRESS_ID_NUM,
        SUPERVISOR_ID,
        DEPARTMENT_ID,
        EMAIL,
        PASSWORD,
        TITLE,
        1000.00);
    END;
/

CREATE OR REPLACE PROCEDURE INSERT_ATTACHMENT (
    FILENAME IN VARCHAR2,
    DIRECTORY IN VARCHAR2,
    REQUEST_ID IN NUMBER,
    APPROVAL_TYPE IN VARCHAR2)
    AS
    BEGIN
        INSERT INTO ATTACHMENT (
        ATTACHMENT_ID,
        ATTACHMENT_FILENAME,
        ATTACHMENT_DIRECTORY,
        ATTACHMENT_REQUEST_ID,
        ATTACHMENT_APPROVAL_TYPE)
        VALUES (
        1,
        FILENAME,
        DIRECTORY,
        REQUEST_ID,
        (SELECT REQUEST_STATUS_ID 
            FROM REQUEST_STATUS 
            WHERE REQUEST_STATUS_NAME = APPROVAL_TYPE));
    END;
/

CREATE OR REPLACE PROCEDURE INSERT_REQUEST (
    EMPLOYEE_ID IN NUMBER,
    COST IN NUMBER,
    COURSE_DATE IN DATE,
    STREET_ADDRESS IN VARCHAR2,
    CITY IN VARCHAR2,
    STATE IN VARCHAR2,
    ZIP IN VARCHAR2,
    DESCRIPTION IN VARCHAR2,
    EVENT_TYPE IN NUMBER,
    GRADE_FORMAT IN NUMBER,
    DAYS_MISSED IN NUMBER,
    JUSTIFICATION IN VARCHAR2,
    ADDRESS_ID_NUM OUT NUMBER)
    AS
    BEGIN
        BEGIN
            INSERT INTO ADDRESS (ADDRESS_STREET_ADDRESS, ADDRESS_CITY,
            ADDRESS_STATE, ADDRESS_ZIP) 
            VALUES (
            STREET_ADDRESS,
            CITY,
            STATE,
            ZIP);
        EXCEPTION
            WHEN OTHERS THEN
            NULL;
        END;
        
        SELECT ADDRESS_ID INTO ADDRESS_ID_NUM FROM ADDRESS WHERE
        ADDRESS_STREET_ADDRESS = STREET_ADDRESS AND
        ADDRESS_CITY = CITY AND
        ADDRESS_STATE = STATE AND
        ADDRESS_ZIP = ZIP;
        
        INSERT INTO REQUEST (
        REQUEST_EMPLOYEE_ID,
        REQUEST_COST,
        REQUEST_COURSE_DATE,
        REQUEST_STATUS,
        REQUEST_ADDRESS,
        REQUEST_DESCRIPTION,
        REQUEST_EVENT_TYPE,
        REQUEST_GRADING_FORMAT,
        REQUEST_DAYS_MISSED,
        REQUEST_JUSTIFICATION)
        VALUES (
        EMPLOYEE_ID,
        COST,
        COURSE_DATE,
        0,
        ADDRESS_ID_NUM,
        DESCRIPTION,
        EVENT_TYPE,
        GRADE_FORMAT,
        DAYS_MISSED,
        JUSTIFICATION);
    END;
/

--------------------------------------------------------------------------------
-- UPDATE
--------------------------------------------------------------------------------
CREATE OR REPLACE PROCEDURE UPDATE_EMPLOYEE_WITH_ID(
    ID IN NUMBER,
    FIRSTNAME IN VARCHAR2, 
    LASTNAME IN VARCHAR2,
    STREET_ADDRESS IN VARCHAR2,
    CITY IN VARCHAR2,
    STATE IN VARCHAR2,
    ZIP IN VARCHAR2,
    SUPERVISOR_ID IN NUMBER,
    DEPARTMENT_ID IN NUMBER,
    EMAIL IN VARCHAR2,
    PASSWORD IN RAW,
    TITLE IN VARCHAR2,
    FUNDS IN NUMBER,
    ADDRESS_ID_NUM OUT NUMBER,
    TITLE_ID OUT NUMBER)
    AS      
    BEGIN
        BEGIN
            INSERT INTO ADDRESS (
            ADDRESS_STREET_ADDRESS,
            ADDRESS_CITY,
            ADDRESS_STATE,
            ADDRESS_ZIP)
            VALUES (
            STREET_ADDRESS,
            CITY,
            STATE,
            ZIP);
        
        EXCEPTION
            WHEN OTHERS THEN
            NULL;
        END;
        
        SELECT ADDRESS_ID INTO ADDRESS_ID_NUM FROM ADDRESS WHERE 
        ADDRESS_STREET_ADDRESS = STREET_ADDRESS AND
        ADDRESS_CITY = CITY AND
        ADDRESS_STATE = STATE AND
        ADDRESS_ZIP = ZIP;

        BEGIN
            INSERT INTO EMPLOYEE_TITLE (EMPLOYEE_TITLE_ID, EMPLOYEE_TITLE_NAME)
            VALUES (ID_SEQ.NEXTVAL, TITLE);
        EXCEPTION
            WHEN OTHERS THEN
            NULL;
        END;

        SELECT EMPLOYEE_TITLE_ID INTO TITLE_ID FROM EMPLOYEE_TITLE WHERE
        EMPLOYEE_TITLE_NAME = TITLE;

        UPDATE EMPLOYEE SET
        EMPLOYEE_FIRSTNAME = FIRSTNAME,
        EMPLOYEE_LASTNAME = LASTNAME,
        EMPLOYEE_ADDRESS = ADDRESS_ID_NUM,
        EMPLOYEE_SUPER_ID = SUPERVISOR_ID,
        EMPLOYEE_DEPARTMENT = DEPARTMENT_ID,
        EMPLOYEE_EMAIL = EMAIL,
        EMPLOYEE_PASSWORD = PASSWORD,
        EMPLOYEE_TITLE = TITLE_ID,
        EMPLOYEE_FUNDS = FUNDS
        WHERE EMPLOYEE_ID = ID;
    END;
/

CREATE OR REPLACE PROCEDURE UPDATE_EMPLOYEE_WITH_EMAIL(
    OLD_EMAIL IN VARCHAR2,
    FIRSTNAME IN VARCHAR2, 
    LASTNAME IN VARCHAR2,
    STREET_ADDRESS IN VARCHAR2,
    CITY IN VARCHAR2,
    STATE IN VARCHAR2,
    ZIP IN VARCHAR2,
    SUPERVISOR_ID IN NUMBER,
    DEPARTMENT_ID IN NUMBER,
    EMAIL IN VARCHAR2,
    PASSWORD IN VARCHAR2,
    TITLE IN VARCHAR2,
    ADDRESS_ID_NUM OUT NUMBER,
    TITLE_ID OUT NUMBER)
    AS      
    BEGIN
        BEGIN
            INSERT INTO ADDRESS (
            ADDRESS_STREET_ADDRESS,
            ADDRESS_CITY,
            ADDRESS_STATE,
            ADDRESS_ZIP)
            VALUES (
            STREET_ADDRESS,
            CITY,
            STATE,
            ZIP);
        EXCEPTION
            WHEN OTHERS THEN
            NULL;
        END;
        
        SELECT ADDRESS_ID INTO ADDRESS_ID_NUM FROM ADDRESS WHERE 
        ADDRESS_STREET_ADDRESS = STREET_ADDRESS AND
        ADDRESS_CITY = CITY AND
        ADDRESS_STATE = STATE AND
        ADDRESS_ZIP = ZIP;

        BEGIN
            INSERT INTO EMPLOYEE_TITLE (EMPLOYEE_TITLE_ID, EMPLOYEE_TITLE_NAME)
            VALUES (ID_SEQ.NEXTVAL, TITLE);
        EXCEPTION
            WHEN OTHERS THEN
            NULL;
        END;

        SELECT EMPLOYEE_TITLE_ID INTO TITLE_ID FROM EMPLOYEE_TITLE WHERE
        EMPLOYEE_TITLE_NAME = TITLE;

        UPDATE EMPLOYEE SET
        EMPLOYEE_FIRSTNAME = FIRSTNAME,
        EMPLOYEE_LASTNAME = LASTNAME,
        EMPLOYEE_ADDRESS = ADDRESS_ID_NUM,
        EMPLOYEE_SUPER_ID = SUPERVISOR_ID,
        EMPLOYEE_DEPARTMENT = DEPARTMENT_ID,
        EMPLOYEE_EMAIL = EMAIL,
        EMPLOYEE_PASSWORD = PASSWORD,
        EMPLOYEE_TITLE = TITLE_ID
        WHERE EMPLOYEE_EMAIL = OLD_EMAIL;
    END;
/

CREATE OR REPLACE PROCEDURE UPDATE_ATTACHMENT(
    OLD_ID IN NUMBER,
    FILENAME IN VARCHAR2,
    DIRECTORY IN VARCHAR2,
    REQUEST_ID IN NUMBER,
    APPROVAL_TYPE IN VARCHAR2)
    AS
    BEGIN
        UPDATE ATTACHMENT SET
        ATTACHMENT_FILENAME = FILENAME,
        ATTACHMENT_DIRECTORY = DIRECTORY,
        ATTACHMENT_REQUEST_ID = REQUEST_ID,
        ATTACHMENT_APPROVAL_TYPE = 
            (SELECT REQUEST_STATUS_ID FROM REQUEST_STATUS 
            WHERE REQUEST_STATUS_NAME = APPROVAL_TYPE)
        WHERE ATTACHMENT_ID = OLD_ID;
    END;
/

CREATE OR REPLACE PROCEDURE UPDATE_REQUEST(
    OLD_ID IN NUMBER,
    FILENAME IN VARCHAR2,
    DIRECTORY IN VARCHAR2,
    REQUEST_ID IN NUMBER,
    APPROVAL_TYPE IN VARCHAR2)
    AS
    BEGIN
        UPDATE ATTACHMENT SET
        ATTACHMENT_FILENAME = FILENAME,
        ATTACHMENT_DIRECTORY = DIRECTORY,
        ATTACHMENT_REQUEST_ID = REQUEST_ID,
        ATTACHMENT_APPROVAL_TYPE = 
            (SELECT REQUEST_STATUS_ID FROM REQUEST_STATUS 
            WHERE REQUEST_STATUS_NAME = APPROVAL_TYPE)
        WHERE ATTACHMENT_ID = OLD_ID;
    END;
/



--CREATE OR REPLACE PROCEDURE UPDATE_REQUEST(
--
--	END;
--/

CREATE OR REPLACE PROCEDURE DELETE_EMPLOYEE_WITH_ID(ID IN NUMBER) AS
    BEGIN
        UPDATE EMPLOYEE SET
        EMPLOYEE_SUPER_ID = 
        (SELECT EMPLOYEE_SUPER_ID FROM EMPLOYEE
        WHERE EMPLOYEE_ID = ID)
        WHERE EMPLOYEE_SUPER_ID = ID;
        
        DELETE FROM EMPLOYEE WHERE EMPLOYEE_ID = ID;
    END;
/

CREATE OR REPLACE PROCEDURE DELETE_REQUEST_WITH_ID(ID IN NUMBER) AS
    BEGIN
        
        DELETE FROM REQUEST WHERE REQUEST_ID = ID;
    END;
/

CREATE OR REPLACE PROCEDURE DELETE_EMPLOYEE_WITH_EMAIL(EMAIL IN VARCHAR2) AS
    BEGIN
        UPDATE EMPLOYEE SET
        EMPLOYEE_SUPER_ID = 
        (SELECT EMPLOYEE_SUPER_ID FROM EMPLOYEE
        WHERE EMPLOYEE_EMAIL = EMAIL)
        WHERE EMPLOYEE_SUPER_ID = 
        (SELECT EMPLOYEE_ID FROM EMPLOYEE
        WHERE EMPLOYEE_EMAIL = EMAIL);
        
        DELETE FROM EMPLOYEE WHERE EMPLOYEE_EMAIL = EMAIL;
    END;
/

CREATE OR REPLACE PROCEDURE UPDATE_REQUEST_WITH_ID(
    ID IN NUMBER,
    EMPLOYEE_ID IN NUMBER, 
    JUSTIFICATION IN VARCHAR2,
    STATUS IN NUMBER,
    COST IN NUMBER)
    AS      
    BEGIN
        UPDATE REQUEST SET
        REQUEST_ID = ID,
        REQUEST_EMPLOYEE_ID = EMPLOYEE_ID,
        REQUEST_JUSTIFICATION = JUSTIFICATION,
        REQUEST_STATUS = STATUS,
        REQUEST_COST = COST
        WHERE REQUEST_ID = ID;
    END;
/

CREATE OR REPLACE PROCEDURE UPDATE_REQUEST_STATUS(
    ID IN NUMBER,
    STATUS IN NUMBER)
    AS      
    BEGIN
        UPDATE REQUEST SET
        REQUEST_ID = ID,
        REQUEST_STATUS = STATUS
        WHERE REQUEST_ID = ID;
    END;
/


/******************************************************************************/
/******************************************************************************/
/******************************************************************************/







--Select  e.Employee_id,
--        r.Request_id,
--        r.Request_cost,
--        e.Employee_funds
--from employee e inner join request r
--on r.request_employee_id = e.employee_id;


--var emp sys_refcursor;"empl
--exec READ_EMPLOYEE_BY_EMAIL('dperson@work.com', :emp);
--print emp;
--/
--
--DECLARE
--addrIdNum NUMBER;
--titleId NUMBER;
--BEGIN
--INSERT_EMPLOYEE('test', 'test', 'test', 'test', 'LA', '70121', 1234, 1234, 'mnew', '1234', 'whatever', addrIdNum, titleId);
--dbms_output.put_line(addrIdNum);
--dbms_output.put_line(titleId);
--END;

