--select 'DROP table', table_name, 'cascade constraints;' from user_tables;

-- Create tables
CREATE TABLE CRITERIA_TYPE (
    CRIT_TYPE_ID number(1),
    CRIT_TYPE VARCHAR2(20) UNIQUE NOT NULL,
    CONSTRAINT PK_CRIT_TYPE PRIMARY KEY(CRIT_TYPE_ID)
);

CREATE TABLE CRITERIA (
    CRIT_ID number(6),
    CRIT_TYPE_ID number(1),
    CONSTRAINT PK_CRIT_ID PRIMARY KEY(CRIT_ID),
    CONSTRAINT FK_CRIT_CRIT_TYPE FOREIGN KEY (CRIT_TYPE_ID)
        REFERENCES CRITERIA_TYPE(CRIT_TYPE_ID)
);

CREATE TABLE CRITERIA_BLOB_LOOKUP (
    BLOB_ID number(6),
    CRIT_ID number(6),
    FNAME VARCHAR(100) NOT NULL,
    FBLOB BLOB NOT NULL,
    CONSTRAINT PK_BLOB PRIMARY KEY(BLOB_ID),
    CONSTRAINT FK_BLOB_CRIT FOREIGN KEY(CRIT_ID)
        REFERENCES CRITERIA (CRIT_ID)
);

CREATE TABLE DEPARTMENT_TYPE (
    DEPT_TYPE_ID number(1),
    DEPT_TYPE VARCHAR2(30) NOT NULL,
    CONSTRAINT PK_DEPT_TYPE PRIMARY KEY(DEPT_TYPE_ID)
);

CREATE TABLE DEPARTMENT_BRANCH (
    zip number(5),
    City Varchar2(50) NOT NULL,
    State varchar2(20) NOT NULL,
    country varchar2(50) NOT NULL,
    CONSTRAINT PK_BRANCH PRIMARY KEY(ZIP),
    CHECK (ZIP > 9999)
);

CREATE TABLE DEPARTMENT (
    DEPT_ID number(6),
    DEPT_TYPE_ID number(1),
    zip number(5),
    CONSTRAINT PK_DEPT_ID PRIMARY KEY (DEPT_ID),
    CONSTRAINT FK_DEPT_DEPT_TYPE FOREIGN KEY(DEPT_TYPE_ID)
        REFERENCES DEPARTMENT_TYPE (DEPT_TYPE_ID),
    CONSTRAINT FK_DEPT_BRANCH FOREIGN KEY(ZIP)
        REFERENCES DEPARTMENT_BRANCH (ZIP)
);

CREATE TABLE EMPLOYEE_TYPE (
    EMP_TYPE_ID number(1),
    EMP_TYPE VARCHAR(20) UNIQUE NOT NULL,
    CONSTRAINT PK_EMP_TYPE PRIMARY KEY(EMP_TYPE_ID)
);

CREATE TABLE PERMISSIONS (
    PERM_ID number(1),
    PERM_TYPE VARCHAR2(20) UNIQUE NOT NULL,
    CONSTRAINT PK_PERM PRIMARY KEY(PERM_ID)
);

CREATE TABLE EMPLOYEE_STATUS (
    EMP_STAT_ID number(1),
    EMP_STAT VARCHAR(20) UNIQUE NOT NULL,
    CONSTRAINT PK_EMP_STAT PRIMARY KEY(EMP_STAT_ID)
);

CREATE TABLE EMPLOYEE (
    EMP_ID number(6),
    EMP_TYPE_ID number(1),
    DEPT_ID number(6),
    REPORTS_TO number(6),
    ACCEPTED_AMOUNT number(4, 2),
    EMP_STAT_ID number(1),
    Perm_ID number(1),
    CONSTRAINT PK_EMP_ID PRIMARY KEY (EMP_ID),
    CONSTRAINT FK_EMP_EMP_TYPE FOREIGN KEY (EMP_TYPE_ID)
        REFERENCES EMPLOYEE_TYPE (EMP_TYPE_ID),
    CONSTRAINT FK_EMP_DEPT FOREIGN KEY (DEPT_ID)
        REFERENCES DEPARTMENT(DEPT_ID),
    CONSTRAINT FK_EMP_REPORTSTO FOREIGN KEY (REPORTS_TO)
        REFERENCES EMPLOYEE (EMP_ID),
    CONSTRAINT FK_EMP_EMP_STAT FOREIGN KEY (EMP_STAT_ID)
        REFERENCES EMPLOYEE_STATUS (EMP_STAT_ID),
    CONSTRAINT FK_EMP_PERM FOREIGN KEY (PERM_ID)
        REFERENCES PERMISSIONS (PERM_ID)
);

CREATE TABLE CREDENTIALS (
    EMP_ID number(6),
    USERNAME VARCHAR2(20) UNIQUE NOT NULL,
    PASSWORDS VARCHAR2(64) NOT NULL,
    SALT VARCHAR2(64) UNIQUE NOT NULL,
    CONSTRAINT PK_CRED_EMP PRIMARY KEY (EMP_ID),
    CONSTRAINT FK_CRED_EMP FOREIGN KEY (EMP_ID)
        REFERENCES EMPlOYEE (EMP_ID)
);

CREATE TABLE DEPARTMENT_HEAD (
    DEPT_ID number(6) UNIQUE,
    DEPT_HEAD number(6) UNIQUE,
    CONSTRAINT FK_DEPT_HEAD_DEPT FOREIGN KEY (DEPT_ID)
        REFERENCES DEPARTMENT (DEPT_ID),
    CONSTRAINT FK_DEPT_HEAD FOREIGN KEY (DEPT_HEAD)
        REFERENCES EMPLOYEE(EMP_ID)
);

CREATE TABLE EVENT_TYPE (
    EVENT_TYPE_ID number(1),
    EVENT_TYPE VARCHAR2(50) UNIQUE NOT NULL,
    BASE_PERCENT number(3) NOT NULL,
    CONSTRAINT PK_EVENT_TYPE PRIMARY KEY (EVENT_TYPE_ID)
);

CREATE TABLE EVENT (
    EVENT_ID number(6),
    EVENT_TYPE_ID number(1),
    DEPT_ID number(6),
    CRIT_ID number(6),
    CONSTRAINT PK_EVENT_ID PRIMARY KEY (EVENT_ID),
    CONSTRAINT FK_EVENT_TYPE_ID FOREIGN KEY (EVENT_TYPE_ID)
        REFERENCES EVENT_TYPE (EVENT_TYPE_ID),
    CONSTRAINT FK_EVENT_CRIT FOREIGN KEY (CRIT_ID)
        REFERENCES CRITERIA (CRIT_ID),
    CONSTRAINT FK_EVENT_DEPT FOREIGN KEY (DEPT_ID)
        REFERENCES DEPARTMENT(DEPT_ID)
);

-- allow for event persistence beyond employee termination
CREATE TABLE EMPLOYEE_EVENT_JUNCTION (
    EMP_ID number(6) NOT NULL,
    EVENT_ID number(6),
    CONSTRAINT FK_EEJ_EVENT FOREIGN KEY (EVENT_ID)
        REFERENCES EVENT (EVENT_ID)
);

CREATE TABLE REQUEST_STATUS (
    REQ_STAT_ID number(1),
    REQ_STAT VARCHAR2(20) UNIQUE NOT NULL,
    CONSTRAINT PK_REQ_STAT PRIMARY KEY(REQ_STAT_ID)
);

CREATE TABLE REQUEST_TYPE (
    REQ_TYPE_ID number(1),
    REQ_TYPE VARCHAR2(30) UNIQUE NOT NULL,
    CONSTRAINT PK_REQ_TYPE PRIMARY KEY(REQ_TYPE_ID)
);

CREATE TABLE REQUEST (
    REQ_ID number(6),
    REQ_TYPE_ID number(1),
    REQ_STAT_ID number(1),
    PERCENTAGE number(3) NOT NULL,
    MSG_LINK VARCHAR2(100) NULL,
    CONSTRAINT PK_REQ_ID PRIMARY KEY (REQ_ID),
    CONSTRAINT FK_REQ_REQ_STAT FOREIGN KEY (REQ_STAT_ID)
        REFERENCES REQUEST_STATUS (REQ_STAT_ID),
    CONSTRAINT FK_REQ_REQ_TYPE FOREIGN KEY (REQ_TYPE_ID)
        REFERENCES REQUEST_TYPE (REQ_TYPE_ID)
);

CREATE TABLE REQUEST_EVENT_JUNCTION (
    REQ_ID number(6) UNIQUE,
    EVENT_ID number(6) UNIQUE,
    CONSTRAINT FK_REJ_REQ FOREIGN KEY (REQ_ID)
        REFERENCES REQUEST (REQ_ID),
    CONSTRAINT FK_REJ_EVENT_ID FOREIGN KEY (EVENT_ID)
        REFERENCES EVENT (EVENT_ID)
);

CREATE TABLE REQUEST_EMPLOYEE_JUNCTION (
    REQ_ID number(6) UNIQUE,
    EMP_ID number(6) UNIQUE,
    CONSTRAINT FK_REMPJ_REQ FOREIGN KEY (REQ_ID)
        REFERENCES REQUEST(REQ_ID),
    CONSTRAINT FK_REMPJ_EMP FOREIGN KEY (EMP_ID)
        REFERENCES EMPLOYEE (EMP_ID)
);

-- Preload Department types and Criteria types

-- Statuses
INSERT INTO REQUEST_STATUS VALUES(0, 'approved');
INSERT INTO REQUEST_STATUS VALUES(1, 'pending');
INSERT INTO REQUEST_STATUS VALUES(-1, 'denied');

-- Criterion
INSERT INTO CRITERIA_TYPE VALUES(0, 'Grading');
INSERT INTO CRITERIA_TYPE VALUES(1, 'Presentation');

-- Departments
INSERT INTO DEPARTMENT_TYPE VALUES(0, 'Production');
INSERT INTO DEPARTMENT_TYPE VALUES(1, 'Purchasing');
INSERT INTO DEPARTMENT_TYPE VALUES(2, 'Research and Development');
INSERT INTO DEPARTMENT_TYPE VALUES(3, 'Marketing');
INSERT INTO DEPARTMENT_TYPE VALUES(4, 'Human Resources');
INSERT INTO DEPARTMENT_TYPE VALUES(5, 'Accounting and Finance');
INSERT INTO DEPARTMENT_TYPE VALUES(6, 'Executive');

-- Event types
INSERT INTO EVENT_TYPE VALUES(0, 'University Courses', 80);
INSERT INTO EVENT_TYPE VALUES(1, 'Seminars', 60);
INSERT INTO EVENT_TYPE VALUES(2, 'Certification Preparation Classes', 75);
INSERT INTO EVENT_TYPE VALUES(3, 'Certification', 100);
INSERT INTO EVENT_TYPE VALUES(4, 'Technical Training', 90);
INSERT INTO EVENT_TYPE VALUES(5, 'Other', 30);

--Employee types
INSERT INTO EMPLOYEE_TYPE VALUES(0, 'Associate');
INSERT INTO EMPLOYEE_TYPE VALUES(1, 'Management');

-- Employment statuses
INSERT INTO EMPLOYEE_STATUS VALUES(0, 'Ok');
INSERT INTO EMPLOYEE_STATUS VALUES(1, 'Pending');
INSERT INTO EMPLOYEE_STATUS VALUES(2, 'Locked');
INSERT INTO EMPLOYEE_STATUS VALUES(-1, 'Terminated');

-- permissions
INSERT INTO PERMISSIONS VALUES(0, 'None');
INSERT INTO PERMISSIONS VALUES(1, 'Read only');
INSERT INTO PERMISSIONS VALUES(2, 'Read/Write');

-- Request types
INSERT INTO REQUEST_TYPE VALUES(0, 'Tuition Reimbursement Request');
INSERT INTO REQUEST_TYPE VALUES(1, 'Account Request');

-- create some departments
INSERT INTO DEPARTMENT_BRANCH VALUES(20190, 'Reston', 'VA', 'US');
INSERT INTO DEPARTMENT VALUES(1, 0, 20190);
INSERT INTO DEPARTMENT VALUES(2, 1, 20190);
INSERT INTO DEPARTMENT VALUES(3, 2, 20190);
INSERT INTO DEPARTMENT VALUES(4, 3, 20190);
INSERT INTO DEPARTMENT VALUES(5, 4, 20190);
INSERT INTO DEPARTMENT VALUES(6, 5, 20190);
INSERT INTO DEPARTMENT VALUES(7, 6, 20190);

-- Create sequences
DROP SEQUENCE emp_id_seq;
CREATE SEQUENCE emp_id_seq
  MINVALUE 1
  MAXVALUE 999999999999999999999999999
  START WITH 1
  INCREMENT BY 1
  CACHE 20;
  
DROP SEQUENCE evnt_id_seq; 
CREATE SEQUENCE evnt_id_seq
  MINVALUE 1
  MAXVALUE 999999999999999999999999999
  START WITH 1
  INCREMENT BY 1
  CACHE 20;
  
DROP SEQUENCE req_id_seq; 
CREATE SEQUENCE req_id_seq
  MINVALUE 1
  MAXVALUE 999999999999999999999999999
  START WITH 1
  INCREMENT BY 1
  CACHE 20;
  
DROP SEQUENCE dept_id_seq; 
CREATE SEQUENCE dept_id_seq
  MINVALUE 1
  MAXVALUE 999999999999999999999999999
  START WITH 1
  INCREMENT BY 1
  CACHE 20;
  
DROP SEQUENCE crit_id_seq; 
CREATE SEQUENCE crit_id_seq
  MINVALUE 1
  MAXVALUE 999999999999999999999999999
  START WITH 1
  INCREMENT BY 1
  CACHE 20;
  
DROP SEQUENCE blob_id_seq; 
CREATE SEQUENCE blob_id_seq
  MINVALUE 1
  MAXVALUE 999999999999999999999999999
  START WITH 1
  INCREMENT BY 1
  CACHE 20;  

-- Create Procedures
CREATE OR REPLACE PROCEDURE CREATE_EMPLOYEE
(emp_type_id IN number, dept_id IN number, super_id IN number,
username IN VARCHAR2, pass IN VARCHAR2, salt IN VARCHAR2) AS
BEGIN
    DECLARE
        e_id INT := emp_id_seq.nextVal;
        BEGIN
            INSERT INTO EMPLOYEE VALUES(e_id, emp_type_id, dept_id, super_id, 0.00, 1, 1);
            INSERT INTO CREDENTIALS VALUES(e_id, username, pass, salt);
        END;
END;
/

CREATE OR REPLACE PROCEDURE UPDATE_EMPLOYEE
(emp_id IN number,  type_id IN NUMBER, d_id IN NUMBER,
super_id IN NUMBER, stat_id IN NUMBER, permi_id IN NUMBER,
amount IN NUMBER, usern IN VARCHAR2, pass IN VARCHAR2, sal IN VARCHAR2) AS
BEGIN
    UPDATE EMPLOYEE SET
                    EMPLOYEE.EMP_TYPE_ID = type_id,
                    EMPLOYEE.DEPT_ID = d_id,
                    EMPLOYEE.REPORTS_TO = super_id,
                    EMPLOYEE.emp_stat_id = stat_id,
                    EMPLOYEE.perm_id = permi_id,
                    EMPLOYEE.ACCEPTED_AMOUNT = amount
                    WHERE EMPLOYEE.EMP_ID = emp_id;
    
    UPDATE CREDENTIALS SET 
--                    Credentials.Username = usern,
                    Credentials.passwords = pass
--                    Credentials.salt = sal
                    WHERE Credentials.EMP_ID = emp_id;
END;
/

CREATE OR REPLACE PROCEDURE DELETE_EMPLOYEE
(emp_id IN NUMBER) AS
BEGIN
    DELETE FROM REQUEST_EMPLOYEE_JUNCTION WHERE REQUEST_EMPLOYEE_JUNCTION.EMP_ID = emp_id;
    DELETE FROM CREDENTIALS WHERE CREDENTIALS.EMP_ID = emp_id;
    DELETE FROM EMPLOYEE WHERE EMPLOYEE.EMP_ID = emp_id;
END;
/

CREATE OR REPLACE PROCEDURE CREATE_DEPT_HEAD
(dept_id IN number, emp_id IN number) AS
BEGIN
    INSERT INTO DEPARTMENT_HEAD VALUES(dept_id, emp_id);
END;
/

CREATE OR REPLACE PROCEDURE UPDATE_DEPT_HEAD
(dept_id IN number, emp_id IN number, old_emp IN number) AS
BEGIN
    UPDATE DEPARTMENT_HEAD SET Department_head.Dept_head = emp_id WHERE Department_HEad.Dept_head = old_emp;
    UPDATE EMPLOYEE SET EMPLOYEE.REPORTS_TO = emp_id WHERE EMPLOYEE.emp_id = old_emp;
END;
/

CREATE OR REPLACE PROCEDURE CREATE_EVENT
(emps IN VARCHAR2, evnt_type_id IN NUMBER, crit_type_id IN NUMBER, dept_id IN NUMBER) AS
BEGIN 
    DECLARE 
        evnt_id INT;
        crit_id INT;
    BEGIN
        evnt_id := evnt_id_seq.nextVal;
        crit_id := crit_id_seq.nextVal;
        INSERT INTO CRITERIA VALUES(crit_id, crit_type_id);
        INSERT INTO EVENT VALUES(evnt_id, evnt_type_id, dept_id, crit_id);
        FOR row_num IN (select to_number(column_value) as IDs from xmltable(emps)) LOOP
            INSERT INTO EMPLOYEE_EVENT_JUNCTION VALUES(row_num.IDs, evnt_id);
        END LOOP;
    END;
END;
/

CREATE OR REPLACE PROCEDURE CREATE_REQUEST
(req_stat_id IN NUMBER, req_type_id IN NUMBER, msg IN VARCHAR2,
evnt_id IN NUMBER, emp_id IN NUMBER) AS
BEGIN DECLARE 
    req_id INT;
    percentage NUMBER(3);
    r_type VARCHAR2(30) := NULL;
BEGIN
    req_id :=  req_id_seq.nextVal;
        SELECT REQ_TYPE INTO r_type FROM REQUEST_TYPE WHERE REQ_TYPE LIKE 'Tuition Reimbursement Request';
        IF(r_type != NULL) THEN
            SELECT BASE_PERCENT INTO percentage FROM EVENT_TYPE NATURAL JOIN EVENT 
                WHERE EVENT.event_id = evnt_id;
        END IF;
        INSERT INTO REQUEST VALUES(req_id, req_stat_id, req_type_id, percentage, msg);
        INSERT INTO REQUEST_EVENT_JUNCTION VALUES(req_id, evnt_id);
    END;
END;
/

CREATE OR REPLACE PROCEDURE UPDATE_REQUEST
(req_id IN NUMBER, req_stat_id IN NUMBER, percentage IN NUMBER) AS
BEGIN
    UPDATE REQUEST SET 
        Request.REQ_STAT_ID = req_stat_id,
        Request.percentage = percentage
        WHERE REQUEST.REQ_ID = REQ_ID;
END;
/

CREATE OR REPLACE PROCEDURE INSERT_BLOB
(crit_id IN NUMBER, fName IN VARCHAR2, fBlob IN BLOB) AS
BEGIN
    DECLARE
        blob_id INT;
    BEGIN
        blob_id := blob_id_seq.nextVal;
        INSERT INTO CRITERIA_BLOB_LOOKUP VALUES(blob_id, crit_id, fName, fBlob);
    END;
END;
/

CREATE OR REPLACE TRIGGER DELETING_REQUEST_TRIGGER
AFTER DELETE ON REQUEST_EMPLOYEE_JUNCTION
FOR EACH ROW
BEGIN
    DELETE FROM REQUEST WHERE REQUEST.REQ_ID IN
        (SELECT REQ_ID FROM REQUEST_EMPLOYEE_JUNCTION WHERE REQUEST_EMPLOYEE_JUNCTION.REQ_ID = :OLD.REQ_ID); 
END;
/

-- Create Executive
CALL CREATE_EMPLOYEE(1, 7, 1, 'executive1', 'Pass1', 'salt1abc');

-- Create BenCo
CALL CREATE_EMPLOYEE(1, 7, 1, 'benCo1', 'Pass1', 'salt2def');

-- Create some Department Heads
CALL CREATE_EMPLOYEE(1, 1, 1, 'manager1', 'Pass1', 'salt3ghi');
CALL CREATE_EMPLOYEE(1, 2, 1, 'manager2', 'Pass1', 'salt4jkl');
CALL CREATE_EMPLOYEE(1, 3, 1, 'manager3', 'Pass1', 'salt5mno');
CALL CREATE_EMPLOYEE(1, 4, 1, 'manager4', 'Pass1', 'salt6pqr');
CALL CREATE_EMPLOYEE(1, 5, 1, 'manager5', 'Pass1', 'salt7stu');
CALL CREATE_EMPLOYEE(1, 6, 1, 'manager6', 'Pass1', 'salt8vwx');

CALL CREATE_DEPT_HEAD(7, 1);
CALL CREATE_DEPT_HEAD(1, 3);
CALL CREATE_DEPT_HEAD(2, 4);
CALL CREATE_DEPT_HEAD(3, 5);
CALL CREATE_DEPT_HEAD(4, 6);
CALL CREATE_DEPT_HEAD(5, 7);
CALL CREATE_DEPT_HEAD(6, 8);

-- set management to ok
CALL UPDATE_EMPLOYEE(1, 1, 7, 1, 0, 2, 0.00, 'executive1', 'Pass1', 'salt1abc');
SELECT * FROM EMPLOYEE;
CALL UPDATE_EMPLOYEE(2, 1, 6, 1, 0, 2, 0.00, 'benCo1', 'Pass1', 'salt2def');
CALL UPDATE_EMPLOYEE(3, 1, 1, 1, 0, 2, 0.00, 'manager1', 'Pass1', 'salt3ghi');
CALL UPDATE_EMPLOYEE(4, 1, 2, 1, 0, 2, 0.00, 'manager2', 'Pass1', 'salt4jkl');
CALL UPDATE_EMPLOYEE(5, 2, 3, 1, 0, 2, 0.00, 'manager3', 'Pass1', 'salt5mno');
CALL UPDATE_EMPLOYEE(6, 3, 4, 1, 0, 2, 0.00, 'manager4', 'Pass1', 'salt6pqr');
CALL UPDATE_EMPLOYEE(7, 4, 5, 1, 0, 2, 0.00, 'manager5', 'Pass1', 'salt7stu');
CALL UPDATE_EMPLOYEE(8, 5, 6, 1, 0, 2, 0.00, 'manager6', 'Pass1', 'salt8vwx');

commit;
