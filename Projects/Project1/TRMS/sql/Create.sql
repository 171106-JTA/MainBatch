--select 'DROP table', table_name, 'cascade constraints;' from user_tables;

-- Create tables
CREATE TABLE CRITERIA_TYPE (
    CRIT_TYPE_ID number(1),
    CRIT_TYPE VARCHAR2(20) UNIQUE NOT NULL,
    CONSTRAINT PK_CRIT_TYPE PRIMARY KEY(CRIT_TYPE_ID)
);

CREATE TABLE CRITERIA (
    CRIT_ID number(6),
    CRIT_TYPE_ID number(1),
    CONSTRAINT PK_CRIT_ID PRIMARY KEY(CRIT_ID),
    CONSTRAINT FK_CRIT_CRIT_TYPE FOREIGN KEY (CRIT_TYPE_ID)
        REFERENCES CRITERIA_TYPE(CRIT_TYPE_ID)
);

CREATE TABLE GRADING_CRITERIA_LOOKUP (
    GCRIT_ID number(6),
    CRIT_ID number(6),
    GRADE VARCHAR2(10) NOT NULL,
    THRESHOLD number(7, 2) NOT NULL,
    CONSTRAINT PK_GCRIT PRIMARY KEY (GCRIT_ID),
    CONSTRAINT FK_GCRIT_CRIT FOREIGN KEY(CRIT_ID)
        REFERENCES CRITERIA (CRIT_ID),
    CHECK (THRESHOLD <= 1000000 AND THRESHOLD >= 0)
);

CREATE TABLE DEPARTMENT_TYPE (
    DEPT_TYPE_ID number(1),
    DEPT_TYPE VARCHAR2(30) NOT NULL,
    CONSTRAINT PK_DEPT_TYPE PRIMARY KEY(DEPT_TYPE_ID)
);

CREATE TABLE DEPARTMENT_BRANCH (
    zip number(5),
    City Varchar2(50) NOT NULL,
    State varchar2(20) NOT NULL,
    country varchar2(50) NOT NULL,
    CONSTRAINT PK_BRANCH PRIMARY KEY(ZIP),
    CHECK (ZIP > 9999)
);

CREATE TABLE DEPARTMENT (
    DEPT_ID number(6),
    DEPT_TYPE_ID number(1),
    zip number(5),
    CONSTRAINT PK_DEPT_ID PRIMARY KEY (DEPT_ID),
    CONSTRAINT FK_DEPT_DEPT_TYPE FOREIGN KEY(DEPT_TYPE_ID)
        REFERENCES DEPARTMENT_TYPE (DEPT_TYPE_ID),
    CONSTRAINT FK_DEPT_BRANCH FOREIGN KEY(ZIP)
        REFERENCES DEPARTMENT_BRANCH (ZIP)
);

CREATE TABLE EMPLOYEE_TYPE (
    EMP_TYPE_ID number(1),
    EMP_TYPE VARCHAR(20) UNIQUE NOT NULL,
    CONSTRAINT PK_EMP_TYPE PRIMARY KEY(EMP_TYPE_ID)
);

CREATE TABLE PERMISSIONS (
    PERM_ID number(1),
    PERM_TYPE VARCHAR2(20) UNIQUE NOT NULL,
    CONSTRAINT PK_PERM PRIMARY KEY(PERM_ID)
);

CREATE TABLE EMPLOYEE_STATUS (
    EMP_STAT_ID number(1),
    EMP_STAT VARCHAR(20) UNIQUE NOT NULL,
    CONSTRAINT PK_EMP_STAT PRIMARY KEY(EMP_STAT_ID)
);

CREATE TABLE EMPLOYEE (
    EMP_ID number(6),
    EMP_TYPE_ID number(1),
    DEPT_ID number(6),
    REPORTS_TO number(6),
    ACCEPTED_AMOUNT number(4, 2),
    EMP_STAT_ID number(1),
    Perm_ID number(1),
    CONSTRAINT PK_EMP_ID PRIMARY KEY (EMP_ID),
    CONSTRAINT FK_EMP_EMP_TYPE FOREIGN KEY (EMP_TYPE_ID)
        REFERENCES EMPLOYEE_TYPE (EMP_TYPE_ID),
    CONSTRAINT FK_EMP_DEPT FOREIGN KEY (DEPT_ID)
        REFERENCES DEPARTMENT(DEPT_ID),
    CONSTRAINT FK_EMP_REPORTSTO FOREIGN KEY (REPORTS_TO)
        REFERENCES EMPLOYEE (EMP_ID),
    CONSTRAINT FK_EMP_EMP_STAT FOREIGN KEY (EMP_STAT_ID)
        REFERENCES EMPLOYEE_STATUS (EMP_STAT_ID),
    CONSTRAINT FK_EMP_PERM FOREIGN KEY (PERM_ID)
        REFERENCES PERMISSIONS (PERM_ID),
    CHECK(ACCEPTED_AMOUNT <= 100 AND ACCEPTED_AMOUNT >= 0)
);

CREATE TABLE CREDENTIALS (
    EMP_ID number(6),
    USERNAME VARCHAR2(20) UNIQUE NOT NULL,
    PASSWORD_HASH VARCHAR2(64) UNIQUE NOT NULL,
    SALT VARCHAR2(32) UNIQUE NOT NULL,
    CONSTRAINT PK_CRED_EMP PRIMARY KEY (EMP_ID),
    CONSTRAINT FK_CRED_EMP FOREIGN KEY (EMP_ID)
        REFERENCES EMPlOYEE (EMP_ID)
);

CREATE TABLE DEPARTMENT_HEAD (
    DEPT_ID number(6) UNIQUE,
    DEPT_HEAD number(6) UNIQUE,
    CONSTRAINT FK_DEPT_HEAD_DEPT FOREIGN KEY (DEPT_ID)
        REFERENCES DEPARTMENT (DEPT_ID),
    CONSTRAINT FK_DEPT_HEAD FOREIGN KEY (DEPT_HEAD)
        REFERENCES EMPLOYEE(EMP_ID)
);

CREATE TABLE EVENT_TYPE (
    EVENT_TYPE_ID number(1),
    EVENT_TYPE VARCHAR2(50) UNIQUE NOT NULL,
    BASE_PERCENT number(3) NOT NULL,
    CONSTRAINT PK_EVENT_TYPE PRIMARY KEY (EVENT_TYPE_ID)
);

CREATE TABLE EVENT_STATUS (
    EVENT_STAT_ID NUMBER(1),
    EVENT_STAT VARCHAR2(20) UNIQUE NOT NULL,
    CONSTRAINT PK_EVENT_STAT PRIMARY KEY(EVENT_STAT_ID)
);

CREATE TABLE EVENT (
    EVENT_ID number(6),
    EVENT_TYPE_ID number(1),
    EVENT_AMOUNT number(5),
    EVENT_STAT_ID number(1),
    DEPT_ID number(6),
    CRIT_ID number(6),
    start_date TIMESTAMP(0) NOT NULL,
    end_date TIMESTAMP(0) NOT NULL,
    CONSTRAINT PK_EVENT_ID PRIMARY KEY (EVENT_ID),
    CONSTRAINT FK_EVENT_TYPE_ID FOREIGN KEY (EVENT_TYPE_ID)
        REFERENCES EVENT_TYPE (EVENT_TYPE_ID),
    CONSTRAINT FK_EVENT_CRIT FOREIGN KEY (CRIT_ID)
        REFERENCES CRITERIA (CRIT_ID),
    CONSTRAINT FK_EVENT_DEPT FOREIGN KEY (DEPT_ID)
        REFERENCES DEPARTMENT(DEPT_ID),
    CONSTRAINT FK_EVENT_STAT FOREIGN KEY(EVENT_STAT_ID)
        REFERENCES EVENT_STATUS (EVENT_STAT_ID)
);

-- allow for event persistence beyond employee termination
CREATE TABLE EMPLOYEE_EVENT_JUNCTION (
    EMP_ID number(6) NOT NULL,
    EVENT_ID number(6),
    CONSTRAINT FK_EEJ_EVENT FOREIGN KEY (EVENT_ID)
        REFERENCES EVENT (EVENT_ID)
);

CREATE TABLE EVENT_BLOB_LOOKUP (
    BLOB_ID number(6),
    EVENT_ID number(6),
    FNAME VARCHAR2(100) NOT NULL,
    FBLOB BLOB NOT NULL,
    CONSTRAINT PK_BLOB PRIMARY KEY(BLOB_ID),
    CONSTRAINT FK_BLOB_CRIT FOREIGN KEY(EVENT_ID)
        REFERENCES EVENT (EVENT_ID)
);

CREATE TABLE REQUEST_STATUS (
    REQ_STAT_ID number(1),
    REQ_STAT VARCHAR2(20) UNIQUE NOT NULL,
    CONSTRAINT PK_REQ_STAT PRIMARY KEY(REQ_STAT_ID)
);

CREATE TABLE REQUEST_TYPE (
    REQ_TYPE_ID number(1),
    REQ_TYPE VARCHAR2(30) UNIQUE NOT NULL,
    CONSTRAINT PK_REQ_TYPE PRIMARY KEY(REQ_TYPE_ID)
);

CREATE TABLE REQUEST (
    REQ_ID number(6),
    REQ_TYPE_ID number(1),
    REQ_STAT_ID number(1),
    EVALUATOR number(6),
    REQUESTED_AMOUNT number(6),
    PERCENTAGE number(4) NOT NULL,
    CREATE_TIME TIMESTAMP(0) NOT NULL,
    CONSTRAINT PK_REQ_ID PRIMARY KEY (REQ_ID),
    CONSTRAINT FK_REQ_REQ_STAT FOREIGN KEY (REQ_STAT_ID)
        REFERENCES REQUEST_STATUS (REQ_STAT_ID),
    CONSTRAINT FK_REQ_REQ_TYPE FOREIGN KEY (REQ_TYPE_ID)
        REFERENCES REQUEST_TYPE (REQ_TYPE_ID)
);

CREATE TABLE REQUEST_EVENT_JUNCTION (
    REQ_ID number(6) UNIQUE,
    EVENT_ID number(6),
    CONSTRAINT FK_REJ_REQ FOREIGN KEY (REQ_ID)
        REFERENCES REQUEST (REQ_ID),
    CONSTRAINT FK_REJ_EVENT_ID FOREIGN KEY (EVENT_ID)
        REFERENCES EVENT (EVENT_ID)
);

CREATE TABLE REQUEST_EMPLOYEE_JUNCTION (
    REQ_ID number(6) UNIQUE,
    EMP_ID number(6),
    CONSTRAINT FK_REMPJ_REQ FOREIGN KEY (REQ_ID)
        REFERENCES REQUEST(REQ_ID),
    CONSTRAINT FK_REMPJ_EMP FOREIGN KEY (EMP_ID)
        REFERENCES EMPLOYEE (EMP_ID)
);

CREATE TABLE INBOX_STAT (
    MAIL_STAT_ID number(1),
    MAIL_STAT VARCHAR(20) NOT NULL,
    CONSTRAINT PK_INBOX_STAT PRIMARY KEY(MAIL_STAT_ID)
);

CREATE TABLE INBOX (
    MAIL_ID number(6),
    TO_EMP number(6) NOT NULL,
    FROM_EMP number(6) NOT NULL,
    MAIL_STAT_ID number(1) NOT NULL,
    MAIL_SUBJECT VARCHAR2(50) NULL,
    MSG VARCHAR2(150) NOT NULL,
    time_created TIMESTAMP(0) NOT NULL,
    CONSTRAINT PK_MAIL PRIMARY KEY (MAIL_ID),
    CONSTRAINT FK_MAIL_TO_EMP FOREIGN KEY (TO_EMP)
        REFERENCES EMPLOYEE(EMP_ID),
    CONSTRAINT FK_MAIL_FROM_EMP FOREIGN KEY(FROM_EMP)
        REFERENCES EMPLOYEE (EMP_ID),
    CONSTRAINT FK_MAIL_STAT FOREIGN KEY(MAIL_STAT_ID)
        REFERENCES INBOX_STAT (MAIL_STAT_ID)
);

CREATE TABLE INBOX_REQUEST_JUNCTION (
    MAIL_ID number(6) UNIQUE,
    REQ_ID number(6),
    CONSTRAINT FK_IRJ_MAIL FOREIGN KEY(MAIL_ID)
        REFERENCES INBOX(MAIL_ID),
    CONSTRAINT FK_IRJ_REQ FOREIGN KEY(REQ_ID)
        REFERENCES REQUEST (REQ_ID)
);

-- Preload Department types and Criteria types

-- Statuses
INSERT INTO REQUEST_STATUS VALUES(0, 'pending');
INSERT INTO REQUEST_STATUS VALUES(1, 'approved');
INSERT INTO REQUEST_STATUS VALUES(-1, 'denied');
INSERT INTO REQUEST_STATUS VALUES(2, 'complete');

-- Criterion
INSERT INTO CRITERIA_TYPE VALUES(0, 'Grading');
INSERT INTO CRITERIA_TYPE VALUES(1, 'Presentation');

-- Departments
INSERT INTO DEPARTMENT_TYPE VALUES(0, 'Production');
INSERT INTO DEPARTMENT_TYPE VALUES(1, 'Purchasing');
INSERT INTO DEPARTMENT_TYPE VALUES(2, 'Research and Development');
INSERT INTO DEPARTMENT_TYPE VALUES(3, 'Marketing');
INSERT INTO DEPARTMENT_TYPE VALUES(4, 'Human Resources');
INSERT INTO DEPARTMENT_TYPE VALUES(5, 'Accounting and Finance');
INSERT INTO DEPARTMENT_TYPE VALUES(6, 'Executive');

-- Event types
INSERT INTO EVENT_TYPE VALUES(0, 'University Courses', 80);
INSERT INTO EVENT_TYPE VALUES(1, 'Seminars', 60);
INSERT INTO EVENT_TYPE VALUES(2, 'Certification Preparation Classes', 75);
INSERT INTO EVENT_TYPE VALUES(3, 'Certification', 100);
INSERT INTO EVENT_TYPE VALUES(4, 'Technical Training', 90);
INSERT INTO EVENT_TYPE VALUES(5, 'Other', 30);

--Employee types
INSERT INTO EMPLOYEE_TYPE VALUES(0, 'Associate');
INSERT INTO EMPLOYEE_TYPE VALUES(1, 'Management');
INSERT INTO EMPLOYEE_TYPE VALUES(2, 'Benefits Coordinator');

-- Employment statuses
INSERT INTO EMPLOYEE_STATUS VALUES(0, 'Ok');
INSERT INTO EMPLOYEE_STATUS VALUES(1, 'Pending');
INSERT INTO EMPLOYEE_STATUS VALUES(2, 'Locked');
INSERT INTO EMPLOYEE_STATUS VALUES(-1, 'Terminated');

-- permissions
INSERT INTO PERMISSIONS VALUES(0, 'None');
INSERT INTO PERMISSIONS VALUES(1, 'Read only');
INSERT INTO PERMISSIONS VALUES(2, 'Read/Write');

-- Request types
INSERT INTO REQUEST_TYPE VALUES(0, 'Tuition Reimbursement Request');
INSERT INTO REQUEST_TYPE VALUES(1, 'Account Request');

-- Inbox Statuses
INSERT INTO INBOX_STAT VALUES(0, 'New');
INSERT INTO INBOX_STAT VALUES(1, 'Unread');
INSERT INTO INBOX_STAT VALUES(2, 'Read');
INSERT INTO INBOX_STAT VALUES(3, 'Deleted Read');
INSERT INTO INBOX_STAT VALUES(4, 'Deleted Unread');

-- Event Statuses
INSERT INTO EVENT_STATUS VALUES(0, 'Pending');
INSERT INTO EVENT_STATUS VALUES(1, 'In session');
INSERT INTO EVENT_STATUS VALUES(2, 'Post-session');
INSERT INTO EVENT_STATUS VALUES(-1, 'Cancelled');

-- create some departments
INSERT INTO DEPARTMENT_BRANCH VALUES(20190, 'Reston', 'VA', 'US');
INSERT INTO DEPARTMENT VALUES(1, 0, 20190);
INSERT INTO DEPARTMENT VALUES(2, 1, 20190);
INSERT INTO DEPARTMENT VALUES(3, 2, 20190);
INSERT INTO DEPARTMENT VALUES(4, 3, 20190);
INSERT INTO DEPARTMENT VALUES(5, 4, 20190);
INSERT INTO DEPARTMENT VALUES(6, 5, 20190);
INSERT INTO DEPARTMENT VALUES(7, 6, 20190);

-- Create sequences
DROP SEQUENCE emp_id_seq;
CREATE SEQUENCE emp_id_seq
  MINVALUE 1
  MAXVALUE 999999999999999999999999999
  START WITH 1
  INCREMENT BY 1
  CACHE 20;
  
DROP SEQUENCE evnt_id_seq; 
CREATE SEQUENCE evnt_id_seq
  MINVALUE 1
  MAXVALUE 999999999999999999999999999
  START WITH 1
  INCREMENT BY 1
  CACHE 20;
  
DROP SEQUENCE req_id_seq; 
CREATE SEQUENCE req_id_seq
  MINVALUE 1
  MAXVALUE 999999999999999999999999999
  START WITH 1
  INCREMENT BY 1
  CACHE 20;
  
DROP SEQUENCE dept_id_seq; 
CREATE SEQUENCE dept_id_seq
  MINVALUE 1
  MAXVALUE 999999999999999999999999999
  START WITH 1
  INCREMENT BY 1
  CACHE 20;
  
DROP SEQUENCE crit_id_seq; 
CREATE SEQUENCE crit_id_seq
  MINVALUE 1
  MAXVALUE 999999999999999999999999999
  START WITH 1
  INCREMENT BY 1
  CACHE 20;
  
DROP SEQUENCE blob_id_seq; 
CREATE SEQUENCE blob_id_seq
  MINVALUE 1
  MAXVALUE 999999999999999999999999999
  START WITH 1
  INCREMENT BY 1
  CACHE 20; 

DROP SEQUENCE gcrit_id_seq;
CREATE SEQUENCE gcrit_id_seq
  MINVALUE 1
  MAXVALUE 999999999999999999999999999
  START WITH 1
  INCREMENT BY 1
  CACHE 20; 

DROP SEQUENCE mail_id_seq;
CREATE SEQUENCE mail_id_seq
  MINVALUE 1
  MAXVALUE 999999999999999999999999999
  START WITH 1
  INCREMENT BY 1
  CACHE 20; 

-- Create Procedures
CREATE OR REPLACE PROCEDURE CREATE_EMPLOYEE_GET_ID
(emp_type_id IN number, dpt_id IN number, super_id IN number,
username IN VARCHAR2, pass IN VARCHAR2, salt IN VARCHAR2, e_id OUT NUMBER) AS
BEGIN
    DECLARE
        row_count INT;
        d_id INT;
        BEGIN
            e_id := emp_id_seq.nextVal;
            SELECT COUNT(*) INTO row_count FROM DEPARTMENT WHERE DEPT_ID = dpt_id;
            IF (row_count = 0) THEN
                SELECT DEPT_ID INTO d_id FROM DEPARTMENT NATURAL JOIN EMPLOYEE
                    WHERE EMPLOYEE.EMP_ID = super_id;
                    INSERT INTO EMPLOYEE VALUES(e_id, emp_type_id, d_id, super_id, 0.00, 1, 1);
            ELSE
                INSERT INTO EMPLOYEE VALUES(e_id, emp_type_id, dpt_id, super_id, 0.00, 1, 1);
            END IF;
            INSERT INTO CREDENTIALS VALUES(e_id, username, pass, salt);            
        END;
END;
/

-- Create Procedures
CREATE OR REPLACE PROCEDURE CREATE_EMPLOYEE
(emp_type_id IN number, dpt_id IN number, super_id IN number,
username IN VARCHAR2, pass IN VARCHAR2, salt IN VARCHAR2) AS
BEGIN
    DECLARE
        row_count INT;
        d_id INT;
        e_id INT;
        BEGIN
            e_id := emp_id_seq.nextVal;
            SELECT COUNT(*) INTO row_count FROM DEPARTMENT WHERE DEPT_ID = dpt_id;
            IF (row_count = 0) THEN
                SELECT DEPT_ID INTO d_id FROM DEPARTMENT NATURAL JOIN EMPLOYEE
                    WHERE EMPLOYEE.EMP_ID = super_id;
                    INSERT INTO EMPLOYEE VALUES(e_id, emp_type_id, d_id, super_id, 0.00, 1, 1);
            ELSE
                INSERT INTO EMPLOYEE VALUES(e_id, emp_type_id, dpt_id, super_id, 0.00, 1, 1);
            END IF;
            INSERT INTO CREDENTIALS VALUES(e_id, username, pass, salt);            
        END;
END;
/

CREATE OR REPLACE PROCEDURE UPDATE_EMPLOYEE
(e_id IN number,  type_id IN NUMBER, d_id IN NUMBER,
super_id IN NUMBER, stat_id IN NUMBER, permi_id IN NUMBER,
amount IN NUMBER, usern IN VARCHAR2, pass IN VARCHAR2, sal IN VARCHAR2) AS
BEGIN

    UPDATE EMPLOYEE SET
                    EMPLOYEE.EMP_TYPE_ID=type_id,
                    EMPLOYEE.DEPT_ID=d_id,
                    EMPLOYEE.REPORTS_TO=super_id,
                    EMPLOYEE.emp_stat_id=stat_id,
                    EMPLOYEE.perm_id=permi_id,
                    EMPLOYEE.ACCEPTED_AMOUNT=amount
                    WHERE EMPLOYEE.EMP_ID=e_id;
    
    UPDATE CREDENTIALS SET 
                    Credentials.Username = usern,
                    Credentials.password_HASH = pass,
                    Credentials.salt = sal
                    WHERE Credentials.EMP_ID =e_id;
END;
/

CREATE OR REPLACE PROCEDURE DELETE_EMPLOYEE
(e_id IN NUMBER) AS
BEGIN
    DELETE FROM REQUEST_EMPLOYEE_JUNCTION WHERE REQUEST_EMPLOYEE_JUNCTION.EMP_ID = emp_id;
    DELETE FROM CREDENTIALS WHERE CREDENTIALS.EMP_ID = emp_id;
    DELETE FROM EMPLOYEE WHERE EMPLOYEE.EMP_ID = e_id;
END;
/

CREATE OR REPLACE PROCEDURE CREATE_DEPT_HEAD
(d_id IN number, emp_id IN number) AS
BEGIN
    INSERT INTO DEPARTMENT_HEAD VALUES(d_id, emp_id);
END;
/

CREATE OR REPLACE PROCEDURE UPDATE_DEPT_HEAD
(d_id IN number, e_id IN number, old_emp IN number) AS
BEGIN
    UPDATE DEPARTMENT_HEAD SET Department_head.Dept_head = e_id WHERE Department_HEad.Dept_head = old_emp;
    UPDATE EMPLOYEE SET EMPLOYEE.REPORTS_TO = e_id WHERE EMPLOYEE.emp_id = old_emp;
    UPDATE EMPLOYEE SET EMPLOYEE.REPORTS_TO = e_id WHERE EMPLOYEE.reports_To = old_emp;
END;
/

CREATE OR REPLACE PROCEDURE CREATE_EVENT
(emps IN VARCHAR2, evt_type_id IN NUMBER, crt_type_id IN NUMBER, dpt_id IN NUMBER,
grds IN VARCHAR2, vals IN VARCHAR2, s_date IN VARCHAR2, e_date IN VARCHAR2, amnt IN NUMBER) AS
BEGIN 
    DECLARE 
        gc_id INT;
        evt_id INT;
        crt_id INT;
    BEGIN
        evt_id := evnt_id_seq.nextVal;
        crt_id := crit_id_seq.nextVal;
        INSERT INTO CRITERIA VALUES(crt_id, crt_type_id);
        INSERT INTO EVENT VALUES(evt_id, evt_type_id, amnt, 0,  dpt_id, crt_id, TO_TIMESTAMP(s_date, 'YYYY-MM-DD HH24:MI:SS'), TO_TIMESTAMP(e_date, 'YYYY-MM-DD HH24:MI:SS'));
        FOR row_num IN (select to_number(column_value) as IDs from xmltable(emps)) LOOP
            INSERT INTO EMPLOYEE_EVENT_JUNCTION VALUES(row_num.IDs, evt_id);
        END LOOP;
        
        IF (crt_type_id = '0') THEN
            FOR row_val IN (SELECT TRIM( REGEXP_SUBSTR ("A1"."KEY_COL",'[^,]+',1,LEVEL)) "KEY_COL",
                TRIM( REGEXP_SUBSTR ("A1"."VAL_COL",'[^,]+',1,LEVEL)) "VAL_COL" 
                FROM  (SELECT grds "KEY_COL",vals "VAL_COL" 
                FROM "SYS"."DUAL" "A2") "A1" CONNECT BY INSTR("A1"."KEY_COL",',',1,LEVEL-1)>0) LOOP
                gc_id := gcrit_id_seq.nextVal;
                INSERT INTO GRADING_CRITERIA_LOOKUP VALUES(gc_id, crt_id, row_val.key_col, row_val.val_col);
            END LOOP;
        END IF;
    END;
END;
/

CREATE OR REPLACE PROCEDURE CREATE_REQUEST_MESSAGE
(t_ID IN NUMBER, f_ID IN NUMBER, r_id IN NUMBER, subj IN VARCHAR2, msg IN VARCHAR2, ts IN VARCHAR2) AS
BEGIN
    DECLARE
        m_id INT;
    BEGIN
        m_id := mail_id_seq.nextVal;
        INSERT INTO INBOX VALUES(m_id, t_ID, f_ID, 0, subj, msg, TO_TIMESTAMP(ts, 'YYYY-MM-DD HH24:MI:SS'));
        INSERT INTO INBOX_REQUEST_JUNCTION VALUES(m_id, r_id);
    END;    
END;
/

CREATE OR REPLACE PROCEDURE CREATE_MESSAGE
(t_ID IN NUMBER, f_ID IN NUMBER, subj IN VARCHAR2, msg IN VARCHAR2, ts IN VARCHAR2) AS
BEGIN
    DECLARE
        m_id INT;
    BEGIN
        m_id := mail_id_seq.nextVal;
        INSERT INTO INBOX VALUES(m_id, t_ID, f_ID, 0, subj, msg, TO_TIMESTAMP(ts, 'YYYY-MM-DD HH24:MI:SS'));
    END;
END;
/

CREATE OR REPLACE PROCEDURE CREATE_REQUEST
(r_type_id IN NUMBER, evt_id IN NUMBER, e_id IN NUMBER, ts IN VARCHAR2, amnt IN NUMBER) AS
BEGIN DECLARE 
    r_id INT;
    prcnt NUMBER(3);
    s_id INT;
    m_id INT;
BEGIN
    r_id :=  req_id_seq.nextVal;
        IF(r_type_id = 0) THEN
            SELECT BASE_PERCENT INTO prcnt FROM EVENT_TYPE NATURAL JOIN EVENT 
                WHERE EVENT.event_id = evt_id;
            SELECT REPORTS_TO INTO s_id FROM EMPLOYEE WHERE EMP_ID = e_id;
        END IF;
        INSERT INTO REQUEST VALUES(r_id, r_type_id, 0, s_id, amnt, prcnt, TO_TIMESTAMP(ts, 'YYYY-MM-DD HH24:MI:SS'));
        INSERT INTO REQUEST_EVENT_JUNCTION VALUES(r_id, evt_id);
        INSERT INTO REQUEST_EMPLOYEE_JUNCTION VALUES(r_id, e_id);
    END;
END;
/

CREATE OR REPLACE PROCEDURE CREATE_REQUEST_GET_ID
(r_type_id IN NUMBER, evt_id IN NUMBER, e_id IN NUMBER, ts IN VARCHAR2, amnt IN NUMBER, r_id OUT NUMBER) AS
BEGIN DECLARE 
    prcnt NUMBER(3);
    s_id INT;
    m_id INT;
BEGIN
    r_id :=  req_id_seq.nextVal;
        IF(r_type_id = 0) THEN
            SELECT BASE_PERCENT INTO prcnt FROM EVENT_TYPE NATURAL JOIN EVENT 
                WHERE EVENT.event_id = evt_id;
            SELECT REPORTS_TO INTO s_id FROM EMPLOYEE WHERE EMP_ID = e_id;
        END IF;
        INSERT INTO REQUEST VALUES(r_id, r_type_id, 0, s_id, amnt, prcnt, TO_TIMESTAMP(ts, 'YYYY-MM-DD HH24:MI:SS'));
        INSERT INTO REQUEST_EVENT_JUNCTION VALUES(r_id, evt_id);
    END;
END;
/

CREATE OR REPLACE PROCEDURE ESCALATE_REQUEST
(r_id IN NUMBER, e_id IN NUMBER, dt IN VARCHAR2) AS
BEGIN
    DECLARE 
        supId INT;
    BEGIN
        SELECT Employee.REPORTS_TO INTO supID FROM Employee WHERE EMP_ID = e_id;
        UPDATE REQUEST SET 
            Request.EVALUATOR = supId,
            Request.CREATE_TIME = TO_TIMESTAMP(dt, 'yyyy-mm-dd hh24:mi:ss')
            WHERE REQUEST.REQ_ID = R_ID;
    END;
END;
/

CREATE OR REPLACE PROCEDURE UPDATE_REQUEST
(r_id IN NUMBER, r_stat_id IN NUMBER, amnt IN NUMBER) AS
    BEGIN
        UPDATE REQUEST SET 
            Request.REQ_STAT_ID = r_stat_id,
            Request.requested_amount = amnt
            WHERE REQUEST.REQ_ID = R_ID;
END;
/

CREATE OR REPLACE PROCEDURE INSERT_BLOB
(evt_id IN NUMBER, fNm IN VARCHAR2, fBlb IN BLOB) AS
BEGIN
    DECLARE
        blb_id INT;
    BEGIN
        blb_id := blob_id_seq.nextVal;
        INSERT INTO EVENT_BLOB_LOOKUP VALUES(blb_id, evt_id, fNm, fBlb);
    END;
END;
/


-- triggers
CREATE OR REPLACE TRIGGER DELETING_REQUEST_TRIGGER
AFTER DELETE ON REQUEST_EMPLOYEE_JUNCTION
FOR EACH ROW
BEGIN
    DELETE FROM REQUEST WHERE REQUEST.REQ_ID IN
        (SELECT REQ_ID FROM REQUEST_EMPLOYEE_JUNCTION WHERE REQUEST_EMPLOYEE_JUNCTION.REQ_ID = :OLD.REQ_ID); 
END;
/

-- Create Executive
CALL CREATE_EMPLOYEE(1, 7, 1, 'executive1', '$2a$10$LGyQBEkfTWkYYDIZZx9o6Ow67krGOo4.WUMJ4ixCv8.4SlAocT/0O', '$2a$10$LGyQBEkfTWkYYDIZZx9o6O');

-- Create BenCo
CALL CREATE_EMPLOYEE(2, 7, 1, 'benCo1', '$2a$10$qagzlkH9IoNPoD9qg1kjZe5t5BY9doxfRO/ZlB2FqDXvJSPJZ9jDi', '$2a$10$qagzlkH9IoNPoD9qg1kjZe');

-- Create some Department Heads
CALL CREATE_EMPLOYEE(1, 1, 2, 'manager1', '$2a$10$BNN7V5BdMqQ3p4ibBRhIi.3UfsUCTRFQZjpvpEwBu.vPJCiJMmWDa', '$2a$10$BNN7V5BdMqQ3p4ibBRhIi.');
CALL CREATE_EMPLOYEE(1, 2, 2, 'manager2', '$2a$10$A8ziV9qav6IihT5wNiptq.YVOQAqr11VVeSCg8pcCj/hCJ3Wooou2', '$2a$10$A8ziV9qav6IihT5wNiptq.');
CALL CREATE_EMPLOYEE(1, 3, 2, 'manager3', '$2a$10$KCJ9rSMUjuDh1sWWlOgbn.0Z9jHYdihRjREqh2u4sPrzWoEmB/eeK', '$2a$10$KCJ9rSMUjuDh1sWWlOgbn.');
CALL CREATE_EMPLOYEE(1, 4, 2, 'manager4', '$2a$10$TIt5a1Z77s8S3KA4HjKGYOxsgPu6W0/L.rpqwl/cWwB0e1xH83ASG', '$2a$10$TIt5a1Z77s8S3KA4HjKGYO');
CALL CREATE_EMPLOYEE(1, 5, 2, 'manager5', '$2a$10$LcPrijjBQCj4DMPEvPy.luvxhG8ZpLgsHr416JE7AhBZg7etArlja', '$2a$10$LcPrijjBQCj4DMPEvPy.lu');
CALL CREATE_EMPLOYEE(1, 6, 2, 'manager6', '$2a$10$Ok8uyov7AQlBuFRBbJ7Oa.wLsJYkttW2foOnzsxAhu2RCfukqx8Gu', '$2a$10$Ok8uyov7AQlBuFRBbJ7Oa.');

CALL CREATE_DEPT_HEAD(7, 1);
CALL CREATE_DEPT_HEAD(1, 3);
CALL CREATE_DEPT_HEAD(2, 4);
CALL CREATE_DEPT_HEAD(3, 5);
CALL CREATE_DEPT_HEAD(4, 6);
CALL CREATE_DEPT_HEAD(5, 7);
CALL CREATE_DEPT_HEAD(6, 8);

-- set management to ok
CALL UPDATE_EMPLOYEE(1, 1, 7, 1, 0, 2, 0.00, 'executive1', '$2a$10$LGyQBEkfTWkYYDIZZx9o6Ow67krGOo4.WUMJ4ixCv8.4SlAocT/0O', '$2a$10$LGyQBEkfTWkYYDIZZx9o6O');
CALL UPDATE_EMPLOYEE(2, 1, 7, 1, 0, 2, 0.00, 'benCo1', '$2a$10$qagzlkH9IoNPoD9qg1kjZe5t5BY9doxfRO/ZlB2FqDXvJSPJZ9jDi', '$2a$10$qagzlkH9IoNPoD9qg1kjZe');
CALL UPDATE_EMPLOYEE(3, 1, 1, 2, 0, 2, 0.00, 'manager1', '$2a$10$BNN7V5BdMqQ3p4ibBRhIi.3UfsUCTRFQZjpvpEwBu.vPJCiJMmWDa', '$2a$10$BNN7V5BdMqQ3p4ibBRhIi.');
CALL UPDATE_EMPLOYEE(4, 1, 2, 2, 0, 2, 0.00, 'manager2', '$2a$10$A8ziV9qav6IihT5wNiptq.YVOQAqr11VVeSCg8pcCj/hCJ3Wooou2', '$2a$10$A8ziV9qav6IihT5wNiptq.');
CALL UPDATE_EMPLOYEE(5, 1, 3, 2, 0, 2, 0.00, 'manager3', '$2a$10$KCJ9rSMUjuDh1sWWlOgbn.0Z9jHYdihRjREqh2u4sPrzWoEmB/eeK', '$2a$10$KCJ9rSMUjuDh1sWWlOgbn.');
CALL UPDATE_EMPLOYEE(6, 1, 4, 2, 0, 2, 0.00, 'manager4', '$2a$10$TIt5a1Z77s8S3KA4HjKGYOxsgPu6W0/L.rpqwl/cWwB0e1xH83ASG', '$2a$10$TIt5a1Z77s8S3KA4HjKGYO');
CALL UPDATE_EMPLOYEE(7, 1, 5, 2, 0, 2, 0.00, 'manager5', '$2a$10$LcPrijjBQCj4DMPEvPy.luvxhG8ZpLgsHr416JE7AhBZg7etArlja', '$2a$10$LcPrijjBQCj4DMPEvPy.lu');
CALL UPDATE_EMPLOYEE(8, 1, 6, 2, 0, 2, 0.00, 'manager6', '$2a$10$Ok8uyov7AQlBuFRBbJ7Oa.wLsJYkttW2foOnzsxAhu2RCfukqx8Gu', '$2a$10$Ok8uyov7AQlBuFRBbJ7Oa.');

CALL CREATE_EVENT('1,2', 0, 0, 1, 'A,B', '1,2', '01-01-17 01.00.00', '31-12-17 12.59.00', 500);
CALL CREATE_EVENT('1,2', 0, 0, 1, 'A,B', '1,2', '01-01-17 01.00.00', '31-12-17 12.59.00', 600);

SELECT * FROM EVENT;

--SELECT * FROM EMPLOYEE_EVENT_JUNCTION;
--SELECT * FROM GRADING_CRITERIA_LOOKUP;

CALL CREATE_REQUEST(0, 1, 1, '31-12-12 12.59.00', 100);

CALL CREATE_REQUEST(0, 1, 3, '31-12-12 12.59.00', 200);

CALL CREATE_REQUEST(0, 2, 1, '31-12-12 12.59.00', 500);

-- should succeed
CALL CREATE_REQUEST(0, 2, 3, '31-12-12 12.59.00', 600);

CALL CREATE_REQUEST_MESSAGE(3, 2, 1, 'Subject', 'This is the first test message', '31-12-12 12.59.00');
CALL CREATE_REQUEST_MESSAGE(3, 1, 1, 'Subject', 'This is the second test message', '31-12-12 12.59.00');

--rollback;
--CALL CREATE_REQUEST_MESSAGE(1, 1, 1, 'URGENT Request 1 for Employee 1', 'Hello You have a new request for employee: 1', '2017-12-08 16:08:08');
--CALL CREATE_REQUEST_MESSAGE(1, 1, 1, '---URGENT--- Request 1 for Employee 1', 'Hello,\nYou have a new request for employee: 1', '2017-12-08 16:08:08');
--DELETE FROM REQUEST WHERE REQ_ID = 3;
--SELECT * FROM REQUEST;
--SELECT * FROM INBOX_REQUEST_JUNCTION;

SELECT * FROM REQUEST_EVENT_JUNCTION;

SELECT * FROM CREDENTIALS;

--SELECT REQ_ID, REQ_TYPE, EVENT_ID, EMP_ID, REPORTS_TO, REQ_STAT FROM REQUEST NATURAL JOIN REQUEST_STATUS NATURAL JOIN REQUEST_TYPE NATURAL JOIN REQUEST_EMPLOYEE_JUNCTION NATURAL JOIN REQUEST_EVENT_JUNCTION NATURAL JOIN PERMISSIONS NATURAL JOIN EMPLOYEE NATURAL JOIN EMPLOYEE_TYPE WHERE EMP_ID=

SELECT * FROM REQUEST;

CALL UPDATE_REQUEST(4, 1, 80);

CALL ESCALATE_REQUEST(2, 2, '31-10-5 12.59.00');

SELECT * FROM INBOX;
--SELECT REQ_ID, REQ_TYPE, EVENT_ID, EMP_ID, REPORTS_TO, REQ_STAT FROM REQUEST NATURAL JOIN REQUEST_STATUS NATURAL JOIN REQUEST_TYPE NATURAL JOIN REQUEST_EMPLOYEE_JUNCTION NATURAL JOIN REQUEST_EVENT_JUNCTION NATURAL JOIN PERMISSIONS NATURAL JOIN EMPLOYEE NATURAL JOIN EMPLOYEE_TYPE WHERE REPORTS_TO=1;
commit;