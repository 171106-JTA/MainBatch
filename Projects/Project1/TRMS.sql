DROP TABLE Employee;
CREATE TABLE Employee(
    EID NUMBER,
    ROLEID NUMBER,
    DEPTID NUMBER,
    AVAIL_AMOUNT NUMBER DEFAULT 1000,
    FNAME VARCHAR2(200),
    LNAME VARCHAR2(200),
    EMAIL VARCHAR2(200),
    USERNAME VARCHAR2(200) UNIQUE,
    PASS VARCHAR2(200),
    HIREDATE DATE,
    REPORSTO NUMBER,
    CONSTRAINT PK_EID PRIMARY KEY (EID)
);

--DROP TABLE Reimbursement_Request;
--TRUNCATE TABLE Reimbursement_Request;
CREATE TABLE Reimbursement_Request(
    RRID NUMBER,
    EVENTID NUMBER,
    EID NUMBER,
    FNAME VARCHAR2(200),
    LNAME VARCHAR2(200),
    EVENT_DATETIME TIMESTAMP,
    EVENT_PLACE VARCHAR2(200),
    DESCRIPTION VARCHAR2(4000),
    PRICE NUMBER,
    GRADEID NUMBER,
    JUSTIFY VARCHAR2(4000),
    DS_APPROVAL NUMBER,
    DH_APPROVAL NUMBER,
    BC_APPROVAL NUMBER,
    DENIAL_REASON VARCHAR2(4000),
    CONSTRAINT PK_REBID PRIMARY KEY (RRID)
);

CREATE TABLE Event_Type(
    EVENTID NUMBER,
    PERCENTAGE NUMBER,
    EVENTNAME VARCHAR2(200),
    CONSTRAINT PK_EVENTID PRIMARY KEY (EVENTID)
);

CREATE TABLE Role_Type(
    ROLEID NUMBER,
    ROLENAME VARCHAR2(200),
    CONSTRAINT PK_ROLEID PRIMARY KEY (ROLEID)
);

CREATE TABLE GRADE_FORMAT(
    GRADEID NUMBER,
    FORMAT VARCHAR2(5),
    CONSTRAINT PK_GRADEID PRIMARY KEY (GRADEID)
);

CREATE TABLE AmountChanges(
    ACID NUMBER,
    RRID NUMBER,
    OLD_AMOUNT NUMBER,
    NEW_AMOUNT NUMBER,
    CONSTRAINT PK_ACID PRIMARY KEY(ACID)
);

CREATE TABLE Info_Request(
    IRID NUMBER,
    RRID NUMBER UNIQUE,
    REQUESTEEID NUMBER,
    ADDITIONAL_INFO VARCHAR2(200),
    FILENAME VARCHAR2(200),
    MEDIA BLOB,
    CONSTRAINT PK_IRID PRIMARY KEY(IRID)
);

--Views
DROP VIEW All_Request_DATA;
CREATE VIEW All_Request_Data AS
SELECT RR.EID, RR.RRID, ET.EVENTNAME, RR.EVENT_DATETIME, RR.PRICE, 
RR.FNAME, RR.LNAME, RR.EVENT_PLACE, RR.Description, RR.JUSTIFY, RR.DS_APPROVAL, RR.DH_APPROVAL, RR.BC_APPROVAL
FROM (Event_Type ET 
INNER JOIN Reimbursement_Request RR 
ON ET.EVENTID = RR.EVENTID);

--Employee
ALTER TABLE Employee ADD CONSTRAINT FK_ROLEID FOREIGN KEY (ROLEID) REFERENCES Role_Type(ROLEID) ON DELETE CASCADE;

--Reimbursement_Request
ALTER TABLE Reimbursement_Request ADD CONSTRAINT FK_REBTID FOREIGN KEY (REBTID) REFERENCES Reimbursement_Type(REBTID) ON DELETE CASCADE;
ALTER TABLE Reimbursement_Request ADD CONSTRAINT FK_EID FOREIGN KEY (EID) REFERENCES Employee(EID) ON DELETE CASCADE;
ALTER TABLE Reimbursement_Request ADD CONSTRAINT FK_GRADEID FOREIGN KEY (GRADEID) REFERENCES GRADE_FORMAT(GRADEID) ON DELETE CASCADE;

--Sequence
CREATE SEQUENCE submitr_seq
    start with 1
    increment by 1;

CREATE SEQUENCE event_seq
    START WITH 1
    INCREMENT BY 1;

CREATE SEQUENCE emp_seq
    START WITH 100
    INCREMENT BY 1;
    
CREATE SEQUENCE info_seq
    START WITH 1
    INCREMENT BY 1;
    
--Trigger
CREATE OR REPLACE TRIGGER event_trigger
BEFORE INSERT ON Event_Type
FOR EACH ROW
BEGIN

    IF :new.EVENTID IS NULL THEN
    SELECT event_seq.NEXTVAL INTO :new.EVENTID FROM Dual;
    END IF;
    
END;

CREATE OR REPLACE TRIGGER submission_trigger
BEFORE INSERT ON Reimbursement_Request
FOR EACH ROW
BEGIN
    IF :new.rrid IS NULL THEN
    SELECT submitr_seq.NEXTVAL INTO :new.rrid FROM Dual;
    END IF;
END;

CREATE OR REPLACE TRIGGER new_employee
BEFORE INSERT ON Employee
FOR EACH ROW
BEGIN
    IF :new.EID IS NULL THEN
    SELECT emp_seq.NEXTVAL INTO :new.EID FROM Dual;
    END IF;
END;

CREATE OR REPLACE TRIGGER update_amount
AFTER INSERT ON Reimbursement_Request
FOR EACH ROW
BEGIN
    UPDATE Employee SET Avail_Amount = (Avail_Amount - :old.price) WHERE EID = :old.EID;
    COMMIT;
END;

CREATE OR REPLACE TRIGGER info_trigger
BEFORE INSERT ON Info_Request
FOR EACH ROW
BEGIN

    IF :new.IRID IS NULL THEN
    SELECT info_seq.NEXTVAL INTO :new.IRID FROM Dual;
    END IF;
    
END;

--Procedures
CREATE OR REPLACE PROCEDURE submit_request(sEVENTID IN NUMBER, empId IN NUMBER, sFNAME IN VARCHAR2, sLNAME IN VARCHAR2,
sEVENT_DATETIME IN TIMESTAMP, LOCUS IN VARCHAR2, DESCRIPT IN VARCHAR2, costs IN NUMBER, gradeFormat IN NUMBER, justification IN VARCHAR2)
IS
BEGIN
    INSERT INTO Reimbursement_Request (EID, EVENTID, FNAME, LNAME, EVENT_DATETIME, EVENT_PLACE, DESCRIPTION, PRICE, GRADEID, JUSTIFY) 
    VALUES (empID, sEVENTID, sFNAME, sLNAME, sEVENT_DATETIME, LOCUS, DESCRIPT, costs, gradeFormat, justification);
    
    COMMIT;
END;

CREATE OR REPLACE PROCEDURE yearly_update
IS
BEGIN
	UPDATE Employee SET AVAIL_AMOUNT = 1000;
	
	COMMIT;
END;

--Job Scheduler
BEIGN
	DBMS_SCHEDULER.CREATE_JOB(
		job_name => 'yearly amount update',
		job_type => 'STORED_PROCEDURE',
		job_action => 'yearly_update'
		start_date => SYSTIMESTAMP,
		repeat_interval => 'FREQ=YEARLY; BYDATE=0101',
		end_date => null,
		comments => 'resets everyone\'s balance to 1000 each new year');
END;

--Initializations
--EVENT TYPES
INSERT INTO Event_Type (EVENTNAME, PERCENTAGE) VALUES('university courses', .8);
INSERT INTO Event_Type (EVENTNAME, PERCENTAGE) VALUES('seminars', .6);
INSERT INTO Event_Type (EVENTNAME, PERCENTAGE) VALUES('certification preparation classes', .75);
INSERT INTO Event_Type (EVENTNAME, PERCENTAGE) VALUES('certification', 1);
INSERT INTO Event_Type (EVENTNAME, PERCENTAGE) VALUES('technical training', .9);
INSERT INTO Event_Type (EVENTNAME, PERCENTAGE) VALUES('other', .3);

--ROLE TYPES
INSERT INTO Role_Type VALUES(2, 'DEPTHEAD');
INSERT INTO Role_Type VALUES(1, 'SUPER');
INSERT INTO Role_Type VALUES(3, 'BENCO');
INSERT INTO Role_Type VALUES(0, 'REG');
--Grade Format
INSERT INTO Grade_Format VALUES(1, 'LTR');
INSERT INTO Grade_Format VALUES(2, 'P/F');

--EMPLOYEES
INSERT INTO Employee (Username, Pass, Roleid) VALUES ('han', 'jung', 3);
INSERT INTO Employee (Username, Pass, roleid) VALUES ('jeff', 'myers', 1);

COMMIT;